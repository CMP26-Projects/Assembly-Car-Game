;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;; MACROS ;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

DrawPower MACRO powerX , powerY , PType
    ; DRAW MACRO IMG, WID, HEI, STARX, STARY, ISROAD
                         LOCAL DECSPEED , SETOBSTACLE , PASSOBSTACLE , FINISH_DRAWING_POWER

                         MOV   AH , PType

                         CMP   AH,1                                                              ;Increase Speed Powerup
                         JNE   DECSPEED
                         DRAW  BIGINCSPEEDPOWER, BIGPOWERW, BIGPOWERH, powerX, powerY, TMP4
                         JMP   FINISH_DRAWING_POWER
    ; MOV AX ,OFFSET INCSPEEDPOWER
    ; MOV powerupToDraw , AX

    ; CALL DrawPowerup

        
    DECSPEED:            
                         CMP   AH,2                                                              ;Decrease Speed Powerup
                         JNE   SETOBSTACLE
                         DRAW  BIGDECSPEEDPOWER, BIGPOWERW, BIGPOWERH, powerX, powerY, TMP4
                         JMP   FINISH_DRAWING_POWER
    ; MOV AX , OFFSET DECSPEEDPOWER
    ; MOV powerupToDraw , AX
            
    ; CALL DrawPowerup
    ; JMP FINISH_DRAWING_POWER

    SETOBSTACLE:         
                         CMP   AH,3                                                              ;Create Obstacle Powerup
                         JNE   PASSOBSTACLE
                         DRAW  BIGCREATEOBSTPOWER, BIGPOWERW, BIGPOWERH, powerX, powerY, TMP4
                         JMP   FINISH_DRAWING_POWER
    ; MOV AX , OFFSET CREATEOBSTPOWER
    ; MOV powerupToDraw , AX

    ; CALL DrawPowerup
    ; JMP FINISH_Drawing_POWER

    PASSOBSTACLE:        
                         CMP   AH,4                                                              ;Pass Obstacle Powerup
                         JNE   FINISHPOWER
                         DRAW  BIGPASSOBSTPOWER , BIGPOWERW, BIGPOWERH, powerX, powerY, TMP4
    ; MOV AX , OFFSET PASSOBSTPOWER
    ; MOV powerupToDraw , AX

    ; CALL DrawPowerup

    FINISH_DRAWING_POWER:
ENDM

;CarNo (1->car1 , 2->car2)
;MOVEMENT On X change(right ->1 , left-> 0) . On Y change(up -> 1 or down -> 0)
Draw_Car MACRO Img, CarSize, StartPosX, StartPosY , CarNo
             MOV  AX, OFFSET Img
             MOV  CarToDraw, AX

             MOV  AX, CarSize
             MOV  CarToDrawSize, AX

             MOV  AX, StartPosX
             MOV  CarToDrawX, AX

             MOV  AX, StartPosY
             MOV  CarToDrawY, AX
            
             MOV  AL , CarNo
             MOV  CarToScan , AL

             CALL DrawCar
ENDM





;CarNo: 1->car1 , 2->Car2
CLEAR MACRO Car, ClearedSize, ClearedPosX, ClearedPosY
            
          MOV  AX , ClearedSize
          MOV  CarToDrawSize , ClearedSize

          MOV  AX , ClearedPosX
          MOV  CarToDrawX, AX

          MOV  AX , ClearedPosY
          MOV  CarToDrawY , AX

          MOV  AX, OFFSET Car
          MOV  CarToDraw , AX

          CALL ClearCarArea
ENDM

SetVerticalLine MACRO StX , StY, height, Color
                    MOV  DX , StX
                    MOV  CarToDrawX , DX

                    MOV  DX , StY
                    MOV  CarToDrawY , DX

                    MOV  DX , height
                    MOV  LineToDrawH , DX
                    
                    MOV  DX , Color
                    MOV  DrawingColor , DX

                    CALL DrawVerticlLine
ENDM

SetHorizontalLine MACRO StX , StY, width, Color
                      MOV  DX , StX
                      MOV  CarToDrawX , DX

                      MOV  DX , StY
                      MOV  CarToDrawY , DX

                      MOV  DX , width
                      MOV  LineToDrawW , DX

                      MOV  DX , Color
                      MOV  DrawingColor , DX
                    
                      CALL DrawHorizontalLine
ENDM

ClearPower MACRO
                         LOCAL CLEAR_SECOND_POWERUP, Delete_Powerup
                         CMP   powerupParent , 1
                         JNE   CLEAR_SECOND_POWERUP
                  
                         MOV   CarToScan , 1                           ;CAR TAKEN THIS POWERUP
                         MOV   AX , powerup1Posx
                         MOV   TEMPX,AX
                         MOV   AX , powerup1Posy
                         MOV   TEMPY,AX
                         JMP   Delete_Powerup

    CLEAR_SECOND_POWERUP:
                         MOV   CarToScan , 0
                         MOV   AX , powerup2Posx
                         MOV   TEMPX,AX
                         MOV   AX , powerup2Posy
                         MOV   TEMPY,AX


    Delete_Powerup:      
                         CALL  ClearPowerup

ENDM

SETKEYS MACRO Up, Down , Left, Right , DeletePower1 , DeletePower2, F4, F2, Escape

            MOV DL , Up
            MOV UpKeyCode , DL

            MOV DL , Down
            MOV DownKeyCode , DL

            MOV DL , Left
            MOV LeftKeyCode , DL

            MOV DL , Right
            MOV RightKeyCode , DL

            MOV DL , DeletePower1
            MOV DeletePower1Key , DL

            MOV DL , DeletePower2
            MOV DeletePower2Key , DL

            MOV DL , F4
            MOV F4KeyCode , DL

            MOV DL , Escape
            MOV EscKeyCode , DL

            MOV DL , F2
            MOV F2KeyCode , DL


    ; CALL InputButtonSwitchCase
ENDM

    ;Setting Flags to be checked while movement
SetFlags MACRO f1 , f2 , f3 , f4 , f5 , f6, f7, f8, f9

             MOV DL , f1
             MOV UpFlag , DL

             MOV DL , f2
             MOV DownFlag , DL

             MOV DL , f3
             MOV LeftFlag , DL

             MOV DL , f4
             MOV RightFlag , DL

             MOV DL , f5
             MOV KFlag , DL

             MOV DL , f6
             MOV MFlag , DL

             MOV DL , f7
             MOV F4Flag  , DL

             MOV DL , f8
             MOV F2Flag , DL

             MOV DL , f9
             MOV EscFlag  , DL


ENDM

SetPosition MACRO X , Y
                MOV DX , X
                MOV PosX, DX

                MOV DX , Y
                MOV PosY, DX
ENDM


;Scans the path of the car to handle collisions
;pass the left point of the row you want to scan
;carNo -> 1 for first, 0 -> for second
ScanY MACRO x , y , CarNo , MovemetType, Speed
          MOV DX , x
          MOV CarToDrawX , DX

          MOV DX, y
          MOV CarToDrawY , DX

          MOV DL , CarNo
          MOV CarToScan , DL

          MOV DL , MovemetType
          MOV YMovement, DL

          MOV DX , Speed
          MOV CurrentSpeed , DX
ENDM

ScanX MACRO x , y , CarNo , MovemetType, Speed
          MOV DX , X
          MOV CarToDrawX , DX

          MOV DX, y
          MOV CarToDrawY , DX

          MOV DL , CarNo
          MOV CarToScan , DL

          MOV DL , MovemetType
          MOV XMovement, DL

          MOV DX , Speed
          MOV CurrentSpeed , DX

ENDM

CalcStatBarStPts MACRO
                     MOV StatusBarStartX , 0
                     MOV StatusBarStartY,  BACKGROUNDIMAGEPARTH*VERTICALBACKGROUNDPARTSNO
                     MOV DX , SCREEN_HEIGHT
                     SUB DX , StatusBarStartY
                     MOV StatusBarTotalheight, DX
ENDM

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;; road MACROS ;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;MACRO TO DRAW AN IMAGE GIVEN THESE PARAMS

DRAW MACRO IMG, WID, HEI, STARX, STARY, ISROAD
               LOCAL FINISHDRAW
               MOV   AX, OFFSET IMG
               MOV   IMGTODRAW, AX
               MOV   AX, WID
               MOV   WIDTODRAW, AX
               MOV   AX, HEI
               MOV   HEITODRAW, AX
               MOV   AX, STARX
               MOV   STARXTODRAW, AX
               MOV   AX, STARY
               MOV   STARYTODRAW, AX
               CALL  DRAWIMAGE
               CMP   ISROAD, 1
               JNE   FINISHDRAW
               MOV   LASTDI, DI
    FINISHDRAW:
ENDM


;THIS MACRO CHECKS THE WHOLE AREA TO BE DRAWN

CHECKCANDRAW MACRO WID, HEI, STARX, STARY, DIRECTION
                   LOCAL ROWS, COLS, FINISH, HANDLECANTDRAW, CONTINUEUP, CONTINUERIGHT, CONTINUEDOWN, CONTINUELEFT
    ;VIDEO MEMORY
                   MOV   AX, 0A000H
                   MOV   ES, AX
                   MOV   DI, STARY
                   MOV   AX, SCREEN_WIDTH
                   MUL   DI
                   MOV   DI, AX
                   ADD   DI, STARX
                   MOV   AX, HEI
                   MOV   OUTCOUNTER, AX

    ROWS:          
                   MOV   FIRSTBYTEINROW, DI
                   MOV   AX, WID
                   MOV   INCOUNTER, AX
    COLS:          
                   CMP   BYTE PTR ES:[DI], 20
                   JE    HANDLECANTDRAW
                   CMP   BYTE PTR ES:[DI], 31
                   JE    HANDLECANTDRAW
                   INC   DI
                   DEC   INCOUNTER
                   JNZ   COLS
                   MOV   DI, FIRSTBYTEINROW
                   ADD   DI, SCREEN_WIDTH
                   DEC   OUTCOUNTER
                   JNZ   ROWS
                   JMP   FINISH

    HANDLECANTDRAW:
                   CMP   DIRECTION, 0
                   JNE   CONTINUEUP
                   MOV   CANTUP, 1
    CONTINUEUP:    
    
                   CMP   DIRECTION, 1
                   JNE   CONTINUERIGHT
                   MOV   CANTRIGHT, 1
    CONTINUERIGHT: 
    
                   CMP   DIRECTION, 2
                   JNE   CONTINUEDOWN
                   MOV   CANTDOWN, 1
    CONTINUEDOWN:  

                   CMP   DIRECTION, 3
                   JNE   CONTINUELEFT
                   MOV   CANTLEFT, 1
    CONTINUELEFT:  

                   JMP   RANDOMIZEPART
    FINISH:        
ENDM




;MACRO TO CHECK POWERUP AREA
CHECKCANDRAWPOWER MACRO WID, HEI, STARX, STARY
                      LOCAL ROWS, COLS, FINISH, HANDLECANTDRAW, CONTINUEUP, CONTINUERIGHT, CONTINUEDOWN, CONTINUELEFT
    ;VIDEO MEMORY
                      MOV   AX, 0A000H
                      MOV   ES, AX
                      MOV   DI, STARY
                      MOV   AX, SCREEN_WIDTH
                      MUL   DI
                      MOV   DI, AX
                      ADD   DI, STARX
                      MOV   AX, HEI
                      MOV   OUTCOUNTER, AX

    ROWS:             
                      MOV   FIRSTBYTEINROW, DI
                      MOV   AX, WID
                      MOV   INCOUNTER, AX
    COLS:             
                      CMP   BYTE PTR ES:[DI], 16
                      JE    HANDLECANTDRAW
                      INC   DI
                      DEC   INCOUNTER
                      JNZ   COLS
                      MOV   DI, FIRSTBYTEINROW
                      ADD   DI, SCREEN_WIDTH
                      DEC   OUTCOUNTER
                      JNZ   ROWS
                      JMP   FINISH

    HANDLECANTDRAW:   
    

                      JMP   FINISHPOWER
    FINISH:           
ENDM





CHECKPOSSIBILITIES MACRO
                       CMP CANTUP, 0
                       JE  START
                       CMP CANTRIGHT, 0
                       JE  START
                       CMP CANTDOWN, 0
                       JE  START
                       CMP CANTLEFT, 0
                       JE  START
                       JMP LAST
ENDM


.MODEL compact
.STACK 64
.DATA
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;COMMUNICATIONS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;PLAYERNUMBER
    PLAYERNUMBER              DW  1
    SENTVALUE                 DB  ?
    RECIEVEDVALUE             DB  ?
    SENTSTRINGOFFSET          DW  ?
    RECIEVEDSTRINGOFFSET      DW  ?

    ;INTERFACE
    ;LOGO
    LOGOIMGW                  EQU 168
    LOGOIMGH                  EQU 35
    LOGOIMG                   DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16
                              DB  16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 16
                              DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 186, 115
                              DB  42, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 186, 115, 42, 17, 16, 16, 16
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 16, 16, 16, 6, 42, 43, 43, 43, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 6
                              DB  42, 43, 43, 43, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
                              DB  0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 42, 43, 43, 43, 43, 17, 16, 16, 16, 16, 16, 16, 16, 187, 114, 115, 6, 42, 42, 17, 16, 16, 16, 0, 0, 0, 0, 0
                              DB  0, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16
                              DB  16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 43, 43, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16
                              DB  16, 16, 16, 186, 187, 16, 16, 16, 16, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 43, 43, 43, 43, 17, 16, 16, 16, 16, 16, 16, 18, 43, 43, 43, 43, 43, 43, 187
                              DB  16, 16, 16, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 186, 187, 16, 16, 43, 43, 43, 43, 43, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 16, 16, 16, 17, 114, 6, 42, 43, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 43, 43, 43, 43, 17, 187, 114, 115, 6, 42, 43
                              DB  43, 43, 43, 43, 43, 43, 43, 115, 16, 16, 16, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 211, 6, 42, 43, 43, 16, 16, 43, 43, 43, 43, 43, 17, 16, 16, 16, 0, 16, 16, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 186, 43, 43, 43, 43, 43, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 16, 16, 16, 16, 42, 43, 43, 43
                              DB  43, 17, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 6, 16, 16, 16, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 17, 43, 43, 43, 43, 43, 186, 16, 43, 43, 43, 43, 43, 17, 16, 16, 16
                              DB  0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 42, 42, 6, 114, 17, 16, 16, 16, 16, 16, 16, 186, 115, 6, 42, 42
                              DB  16, 16, 16, 16, 42, 43, 43, 43, 43, 17, 6, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 16, 16, 16, 16, 16, 0, 0, 0, 16, 16, 16, 186, 6, 114, 17, 16
                              DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 42, 43, 6, 115, 17, 16, 16, 43
                              DB  43, 43, 43, 43, 17, 16, 16, 16, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
                              DB  16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 18, 16, 16, 16, 17, 17, 16, 186
                              DB  114, 6, 42, 43, 43, 43, 43, 43, 16, 16, 16, 16, 42, 43, 43, 43, 43, 17, 115, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 6, 115, 187, 16, 16, 16, 16, 16, 16, 16, 16
                              DB  16, 16, 16, 115, 43, 43, 43, 42, 115, 187, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16
                              DB  17, 16, 16, 16, 17, 17, 16, 43, 43, 43, 43, 43, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
                              DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16
                              DB  16, 187, 115, 42, 43, 114, 114, 43, 43, 43, 43, 43, 43, 43, 43, 43, 187, 16, 16, 16, 42, 43, 43, 43, 43, 17, 187, 43, 43, 43, 42, 6, 115, 187, 16, 16, 16, 16, 16, 16
                              DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 43, 43, 43, 43, 43, 43, 43, 6, 115, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 16, 16, 16, 16, 186, 115, 42, 43, 115, 16, 43, 43, 43, 43, 43, 17, 16, 16, 16, 16, 16, 16, 16, 6, 6, 6, 6, 115, 114, 187, 186, 17, 16, 16, 16
                              DB  16, 16, 16, 16, 16, 186, 115, 114, 187, 186, 186, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 0, 0
                              DB  0, 0, 0, 0, 0, 16, 16, 16, 6, 43, 43, 43, 43, 114, 186, 43, 43, 43, 43, 43, 43, 43, 43, 43, 6, 186, 17, 16, 42, 43, 43, 43, 43, 17, 16, 42, 43, 43, 43, 43
                              DB  43, 43, 43, 42, 42, 6, 6, 115, 114, 187, 16, 16, 16, 0, 16, 16, 16, 16, 17, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 115, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 16, 16, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 115, 43, 43, 43, 43, 115, 16, 43, 43, 43, 43, 43, 17, 16, 16, 16, 16, 16, 17, 16, 42, 43, 43, 43
                              DB  43, 43, 43, 43, 43, 43, 43, 42, 6, 6, 115, 211, 16, 115, 43, 43, 43, 43, 43, 43, 43, 42, 42, 6, 6, 115, 114, 186, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 16, 16, 16, 6, 43, 43, 43, 43, 114, 17, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 6, 16, 42, 43, 43, 43
                              DB  43, 17, 16, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 16, 16, 16, 0, 16, 16, 16, 187, 115, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 186, 16, 16
                              DB  16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 16, 16, 16, 115, 43, 43, 43, 43, 115, 16, 43, 43, 43, 43, 43, 17, 16, 186, 115
                              DB  6, 43, 6, 16, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 6, 16, 6, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 6, 16, 16, 16, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 6, 43, 43, 43, 43, 114, 17, 43, 43, 43, 43, 43, 6, 42, 43, 43
                              DB  43, 43, 6, 16, 42, 43, 43, 43, 43, 17, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 6, 16, 16, 16, 0, 16, 16, 16, 42, 43, 43, 43, 43, 43, 43
                              DB  43, 43, 43, 43, 43, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 115, 43, 43, 43, 43, 115, 16, 43
                              DB  43, 43, 43, 43, 17, 114, 43, 43, 43, 43, 6, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 6, 16, 6, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
                              DB  43, 43, 43, 115, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 6, 43, 43, 43, 43, 114, 17, 43
                              DB  43, 43, 43, 42, 16, 115, 43, 43, 43, 43, 6, 16, 42, 43, 43, 43, 43, 17, 17, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 6, 16, 16, 16, 0, 16, 16
                              DB  16, 42, 43, 43, 43, 43, 187, 115, 43, 43, 43, 43, 43, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
                              DB  115, 43, 43, 43, 43, 115, 16, 43, 43, 43, 43, 43, 17, 114, 43, 43, 43, 43, 6, 17, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 115, 16, 42, 43, 43
                              DB  43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 115, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 187, 114, 17, 16, 16, 16, 16, 16, 16, 16
                              DB  6, 43, 43, 43, 43, 114, 17, 43, 43, 43, 43, 42, 16, 115, 43, 43, 43, 43, 6, 16, 42, 43, 43, 43, 43, 17, 17, 114, 115, 6, 6, 42, 42, 43, 43, 43, 43, 43, 43, 43
                              DB  43, 115, 16, 16, 16, 0, 16, 16, 16, 42, 43, 43, 43, 43, 186, 16, 42, 43, 43, 43, 43, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 186, 114
                              DB  17, 16, 16, 16, 16, 16, 16, 16, 115, 43, 43, 43, 43, 115, 16, 43, 43, 43, 43, 43, 17, 114, 43, 43, 43, 43, 6, 17, 43, 43, 43, 43, 43, 6, 42, 42, 43, 43, 43, 43
                              DB  43, 43, 43, 114, 16, 114, 6, 6, 6, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 114, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 6, 43
                              DB  43, 42, 115, 187, 16, 16, 16, 16, 6, 43, 43, 43, 43, 114, 17, 43, 43, 43, 43, 42, 16, 115, 43, 43, 43, 43, 6, 16, 42, 43, 43, 43, 43, 17, 16, 16, 16, 16, 16, 16
                              DB  16, 16, 186, 211, 115, 6, 42, 43, 43, 115, 16, 16, 16, 0, 16, 16, 16, 42, 43, 43, 43, 43, 186, 16, 42, 43, 43, 43, 43, 17, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 16, 16, 16, 6, 43, 43, 42, 6, 187, 17, 16, 16, 16, 115, 43, 43, 43, 43, 115, 16, 43, 43, 43, 43, 43, 17, 114, 43, 43, 43, 43, 6, 17, 43, 43, 43, 43
                              DB  42, 16, 17, 17, 186, 114, 6, 42, 43, 43, 43, 114, 16, 16, 16, 16, 16, 16, 16, 16, 186, 114, 115, 6, 42, 43, 43, 114, 16, 16, 16, 0, 0, 0, 16, 16, 16, 16, 0, 0
                              DB  0, 0, 16, 16, 16, 17, 43, 43, 43, 43, 43, 43, 43, 6, 115, 186, 42, 43, 43, 43, 43, 115, 187, 43, 43, 43, 43, 42, 186, 6, 43, 43, 43, 43, 6, 187, 42, 43, 43, 43
                              DB  43, 211, 187, 114, 115, 6, 6, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 42, 16, 16, 16, 0, 16, 16, 16, 42, 43, 43, 43, 43, 6, 114, 43, 43, 43, 43, 43, 17, 16, 16
                              DB  16, 0, 16, 16, 16, 16, 16, 0, 0, 0, 16, 16, 16, 16, 42, 43, 43, 43, 43, 43, 43, 6, 115, 186, 6, 43, 43, 43, 43, 6, 187, 43, 43, 43, 43, 43, 17, 114, 43, 43
                              DB  43, 43, 42, 115, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 6, 187, 114, 115, 6, 6, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 6, 16, 16, 16, 0
                              DB  0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 187, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
                              DB  43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 17, 16, 16, 16, 16, 16, 16, 42, 43, 43, 43, 43, 43, 43
                              DB  43, 43, 43, 43, 43, 17, 16, 16, 16, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
                              DB  43, 43, 43, 43, 6, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
                              DB  43, 43, 43, 42, 16, 16, 16, 16, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 115, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
                              DB  43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 187, 16, 16, 16, 16, 16
                              DB  16, 6, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 17, 16, 16, 16, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 115, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
                              DB  43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
                              DB  43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 17, 16, 16, 16, 0, 16, 16, 16, 16, 17, 16, 16, 16, 16, 16, 16, 16, 187, 6, 42, 43, 43, 43, 43, 43, 43, 43, 43
                              DB  43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
                              DB  43, 43, 6, 16, 16, 16, 16, 16, 16, 16, 17, 114, 6, 43, 43, 43, 43, 43, 43, 43, 43, 17, 16, 16, 16, 16, 16, 16, 16, 17, 16, 16, 16, 16, 16, 16, 16, 186, 6, 42
                              DB  43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
                              DB  43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 114, 16, 16, 16, 0, 16, 16, 16, 187, 43, 42, 6, 187, 17, 16, 16, 16, 16, 17, 186
                              DB  114, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 6, 43, 43, 43, 43, 42, 6, 42, 43, 43, 43, 42, 6, 6, 43, 43, 43, 43, 42, 6, 6, 43, 43, 43, 43, 43, 43
                              DB  43, 43, 43, 42, 42, 6, 6, 115, 114, 187, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 187, 114, 42, 43, 43, 43, 43, 17, 16, 16, 16, 16, 16, 16, 186, 43, 42, 6
                              DB  187, 17, 16, 16, 16, 16, 17, 18, 114, 6, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 6, 43, 43, 43, 43, 42, 6, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
                              DB  43, 43, 43, 42, 42, 6, 6, 115, 115, 114, 187, 114, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 6, 6, 6, 115, 114, 186, 16, 16, 16, 0, 16, 16, 16, 6, 43, 43, 43
                              DB  43, 43, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 6, 115, 186, 16, 16, 186, 43, 42, 115, 186, 16, 16, 6, 42, 115, 187, 16, 16, 17, 42, 6, 114, 17, 16
                              DB  16, 187, 6, 6, 6, 115, 114, 187, 186, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 43, 43, 43, 43, 17, 16, 16
                              DB  16, 16, 16, 16, 115, 43, 43, 43, 43, 43, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 115, 186, 16, 16, 17, 42, 6, 114, 17, 16, 16, 115, 43, 43, 43
                              DB  42, 42, 42, 6, 6, 115, 114, 187, 186, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 42, 6, 6, 115, 114, 187, 186, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
                              DB  0, 16, 16, 16, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 6, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
                              DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 16, 16, 16, 16, 16, 16, 16
                              DB  42, 43, 43, 43, 43, 17, 16, 16, 16, 16, 16, 16, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 6, 16, 16, 16, 16, 16, 16, 16, 16
                              DB  16, 16, 16, 16, 17, 186, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
                              DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 16, 16, 16, 16, 16, 16, 16, 16
                              DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 16, 16, 16, 42, 43, 43, 43, 43, 17, 16, 16, 16, 16, 16, 17, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42
                              DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
                              DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
                              DB  17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 42, 43, 43, 43, 43, 17, 16, 16, 16, 16, 16, 17, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43
                              DB  43, 43, 43, 43, 43, 43, 43, 43, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0
                              DB  0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 17, 114, 6, 42, 43, 43, 43, 43, 43, 43, 42
                              DB  42, 6, 6, 115, 114, 187, 186, 17, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 16, 16, 16, 0, 0, 0, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 42, 43, 43, 43, 43, 17, 16, 16, 16, 16, 16, 16, 16, 17, 114, 6
                              DB  42, 43, 43, 43, 43, 43, 43, 42, 42, 6, 6, 115, 114, 187, 186, 17, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16
                              DB  16, 186, 114, 187, 186, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 42, 43, 43, 43, 42, 17, 16, 16
                              DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 114, 187, 186, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16
                              DB  42, 6, 114, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
                              DB  16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

    
    INPUTIMGW                 EQU 140
    INPUTIMGH                 EQU 30
    INPUTIMG                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 17, 17, 17, 17, 18, 20, 17, 18, 20, 20, 17, 224, 21, 21, 18, 23, 18, 17, 18, 19, 20, 22, 0, 0, 21, 17, 18, 21, 17, 19
                              DB  22, 21, 18, 23, 26, 19, 18, 21, 22, 18, 20, 20, 224, 21, 18, 21, 23, 17, 19, 21, 21, 18, 21, 17, 20, 22, 19, 20, 19, 17, 18, 18, 17, 20, 22, 18, 21, 17, 21, 20
                              DB  18, 21, 27, 18, 21, 23, 0, 0, 19, 20, 20, 19, 21, 23, 17, 18, 18, 17, 18, 21, 21, 18, 19, 20, 20, 18, 21, 26, 19, 17, 17, 18, 21, 31, 19, 19, 22, 18, 21, 23
                              DB  18, 21, 26, 17, 20, 22, 20, 20, 24, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 16, 17, 16, 17, 17, 16, 16, 16, 16, 16, 17
                              DB  16, 16, 16, 16, 16, 17, 16, 16, 17, 16, 16, 17, 17, 18, 17, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 16, 16, 16, 16, 16, 17, 16, 16, 16, 16, 16, 17, 16, 16, 16
                              DB  16, 16, 17, 16, 16, 16, 16, 17, 16, 16, 17, 16, 16, 16, 16, 16, 17, 16, 16, 17, 16, 16, 17, 16, 16, 17, 18, 224, 17, 16, 17, 16, 16, 17, 16, 16, 17, 16, 16, 16
                              DB  16, 16, 17, 16, 16, 16, 16, 17, 17, 16, 17, 16, 16, 17, 17, 16, 16, 16, 16, 17, 16, 16, 17, 16, 16, 16, 16, 17, 17, 16, 17, 22, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 18, 16, 26, 29, 28, 30, 28, 22, 224, 29, 25, 18, 16, 19, 26, 24, 23, 21, 19, 21, 30, 26, 22, 18, 16, 16, 17, 27, 29, 25, 20, 22
                              DB  26, 24, 22, 21, 18, 16, 16, 26, 25, 23, 22, 20, 18, 22, 18, 22, 227, 17, 19, 26, 24, 23, 22, 19, 24, 25, 24, 22, 21, 18, 29, 30, 29, 27, 25, 17, 16, 16, 22, 19
                              DB  17, 22, 19, 17, 23, 20, 17, 16, 16, 19, 21, 17, 21, 20, 17, 22, 30, 29, 28, 26, 22, 16, 16, 19, 21, 18, 22, 19, 17, 224, 30, 27, 22, 224, 16, 224, 21, 18, 23, 19
                              DB  18, 22, 224, 16, 23, 26, 24, 22, 21, 18, 16, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 16, 29, 31, 28, 30, 31, 25, 23, 31, 31, 17
                              DB  16, 21, 31, 31, 31, 31, 27, 23, 30, 31, 31, 31, 24, 18, 29, 29, 31, 31, 23, 25, 31, 31, 31, 31, 23, 16, 18, 31, 31, 31, 31, 31, 22, 31, 30, 31, 31, 30, 23, 31
                              DB  31, 31, 31, 27, 28, 31, 31, 31, 31, 22, 30, 31, 31, 31, 30, 17, 16, 17, 31, 30, 21, 31, 31, 19, 31, 31, 31, 27, 23, 27, 31, 23, 29, 31, 23, 23, 31, 31, 31, 31
                              DB  24, 16, 16, 24, 31, 30, 31, 31, 29, 21, 30, 31, 31, 31, 27, 24, 31, 30, 31, 31, 31, 31, 31, 26, 27, 31, 31, 31, 31, 21, 16, 18, 17, 19, 26, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 31, 18, 16, 25, 31, 20, 23, 31, 22, 24, 31, 24, 16, 16, 224, 30, 28, 23, 24, 22, 22, 31, 26, 28, 31, 21, 27, 31, 26, 17, 21, 17, 22
                              DB  31, 26, 23, 24, 20, 16, 17, 29, 30, 23, 24, 24, 19, 30, 30, 24, 31, 29, 17, 21, 30, 29, 24, 22, 25, 31, 25, 23, 25, 18, 30, 31, 18, 29, 30, 17, 16, 17, 30, 30
                              DB  20, 31, 29, 17, 30, 31, 30, 31, 30, 25, 31, 23, 27, 31, 20, 21, 31, 25, 23, 31, 23, 16, 16, 21, 31, 29, 25, 31, 26, 19, 31, 28, 26, 31, 24, 21, 31, 29, 25, 31
                              DB  28, 27, 31, 24, 24, 31, 25, 23, 25, 19, 16, 16, 16, 16, 16, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 16, 25, 31, 20, 23, 31, 22, 24, 31, 21, 16
                              DB  16, 18, 31, 29, 22, 18, 16, 22, 31, 26, 26, 31, 20, 17, 29, 31, 28, 25, 16, 22, 31, 26, 22, 17, 16, 16, 16, 30, 30, 22, 20, 16, 17, 30, 29, 19, 31, 28, 16, 19
                              DB  31, 27, 16, 16, 25, 31, 25, 22, 16, 16, 30, 31, 22, 30, 28, 16, 16, 16, 29, 30, 18, 31, 29, 17, 30, 29, 19, 31, 27, 22, 31, 23, 25, 31, 227, 21, 31, 27, 24, 31
                              DB  22, 16, 17, 18, 31, 28, 21, 31, 25, 19, 31, 28, 24, 31, 23, 18, 31, 28, 20, 31, 25, 23, 31, 23, 24, 31, 25, 22, 16, 16, 16, 16, 28, 24, 16, 18, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 20, 16, 25, 31, 29, 30, 31, 22, 24, 31, 21, 17, 17, 18, 31, 31, 31, 20, 16, 22, 31, 31, 29, 31, 20, 16, 224, 29, 30, 31, 23, 22
                              DB  31, 31, 30, 17, 17, 18, 16, 30, 31, 31, 24, 16, 17, 30, 29, 19, 31, 28, 16, 19, 31, 27, 16, 16, 25, 31, 31, 29, 16, 16, 30, 31, 30, 31, 28, 16, 17, 16, 29, 30
                              DB  18, 31, 29, 17, 30, 29, 19, 31, 27, 22, 31, 23, 25, 31, 227, 21, 31, 31, 31, 31, 22, 16, 18, 18, 31, 28, 21, 31, 25, 19, 31, 31, 29, 31, 23, 18, 31, 28, 20, 31
                              DB  25, 23, 31, 23, 24, 31, 31, 29, 16, 18, 17, 17, 24, 23, 16, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 16, 25, 31, 30, 31, 25, 17, 24, 31, 21, 16
                              DB  16, 18, 31, 29, 23, 17, 16, 22, 31, 24, 25, 31, 20, 16, 17, 18, 19, 30, 29, 23, 31, 27, 22, 16, 17, 18, 16, 30, 30, 23, 19, 16, 17, 30, 29, 19, 31, 28, 16, 19
                              DB  31, 27, 16, 16, 25, 31, 25, 21, 16, 16, 30, 31, 18, 29, 30, 17, 16, 16, 29, 30, 18, 31, 29, 17, 30, 29, 19, 31, 27, 22, 31, 23, 25, 31, 227, 21, 31, 25, 23, 31
                              DB  23, 16, 16, 18, 31, 28, 21, 31, 25, 19, 31, 26, 23, 31, 23, 18, 31, 28, 20, 31, 25, 23, 31, 23, 24, 31, 25, 21, 16, 17, 18, 16, 16, 16, 16, 21, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 18, 16, 26, 31, 23, 17, 16, 16, 24, 30, 27, 25, 24, 20, 31, 30, 23, 19, 16, 23, 31, 26, 26, 31, 23, 16, 27, 30, 27, 27, 28, 23
                              DB  31, 28, 22, 224, 16, 16, 16, 30, 31, 25, 20, 17, 17, 30, 31, 21, 31, 29, 17, 20, 31, 27, 16, 16, 25, 31, 27, 22, 18, 17, 30, 31, 20, 30, 31, 19, 16, 16, 30, 31
                              DB  27, 31, 29, 18, 31, 30, 25, 31, 27, 25, 31, 29, 29, 31, 25, 22, 31, 27, 23, 31, 27, 16, 16, 19, 31, 29, 21, 31, 28, 21, 31, 28, 24, 31, 26, 19, 31, 30, 21, 31
                              DB  28, 23, 31, 26, 24, 31, 27, 22, 18, 16, 18, 16, 21, 18, 16, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 28, 31, 22, 16, 18, 16, 26, 31, 31, 31
                              DB  31, 21, 30, 31, 31, 30, 16, 25, 31, 25, 28, 31, 22, 17, 27, 31, 31, 27, 17, 23, 30, 31, 31, 26, 16, 16, 17, 29, 31, 31, 31, 18, 19, 30, 31, 19, 30, 29, 16, 22
                              DB  31, 29, 16, 16, 25, 31, 31, 31, 24, 18, 29, 31, 20, 30, 31, 18, 16, 18, 27, 31, 29, 31, 29, 19, 29, 31, 31, 31, 23, 24, 29, 31, 27, 31, 25, 24, 31, 27, 24, 31
                              DB  26, 16, 16, 21, 30, 29, 21, 31, 27, 23, 31, 28, 25, 31, 25, 21, 30, 29, 20, 31, 27, 23, 31, 24, 24, 31, 31, 31, 24, 16, 18, 17, 30, 27, 16, 18, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 16, 18, 17, 17, 17, 16, 16, 18, 19, 20, 22, 16, 16, 19, 23, 23, 16, 16, 17, 18, 16, 18, 17, 16, 16, 16, 19, 16, 16, 16
                              DB  16, 20, 24, 21, 16, 16, 16, 16, 18, 22, 25, 16, 16, 16, 18, 16, 16, 18, 16, 16, 17, 18, 16, 16, 16, 17, 21, 25, 19, 16, 16, 224, 16, 16, 224, 16, 16, 16, 17, 22
                              DB  21, 31, 29, 16, 16, 224, 23, 27, 18, 16, 16, 224, 16, 17, 18, 16, 17, 18, 16, 17, 18, 16, 16, 16, 16, 18, 16, 17, 18, 16, 17, 18, 16, 17, 18, 16, 16, 18, 16, 17
                              DB  18, 16, 17, 18, 16, 17, 20, 24, 19, 17, 17, 16, 17, 18, 16, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 19, 18, 17, 16, 18, 21, 18, 17, 18, 17, 16
                              DB  16, 16, 17, 17, 16, 16, 16, 19, 17, 16, 17, 17, 16, 18, 19, 17, 16, 17, 21, 19, 17, 17, 16, 16, 17, 26, 19, 18, 17, 16, 16, 16, 19, 18, 17, 16, 17, 17, 17, 19
                              DB  17, 17, 17, 22, 19, 17, 16, 16, 16, 17, 17, 17, 16, 17, 17, 16, 21, 16, 21, 31, 31, 31, 28, 16, 17, 17, 16, 16, 16, 18, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17
                              DB  16, 17, 23, 19, 17, 17, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 17, 17, 16, 17, 17, 16, 17, 17, 16, 16, 16, 17, 22, 19, 17, 16, 17, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 19, 0, 0, 0, 0, 0, 31, 27, 22, 20, 31, 20, 19, 224, 0, 0, 23, 19, 0, 22, 20, 0, 0, 26, 23, 0, 0
                              DB  0, 26, 20, 18, 19, 0, 0, 0, 0, 21, 20, 17, 27, 0, 31, 21, 0, 26, 20, 0, 0, 27, 21, 0, 0, 0, 25, 20, 18, 21, 0, 31, 21, 23, 31, 21, 227, 16, 19, 25
                              DB  29, 31, 25, 16, 19, 31, 20, 20, 17, 18, 0, 31, 20, 26, 23, 19, 0, 24, 19, 0, 24, 21, 0, 0, 0, 26, 19, 0, 28, 20, 0, 25, 20, 0, 24, 20, 0, 26, 20, 0
                              DB  25, 19, 0, 24, 19, 0, 25, 20, 18, 19, 0, 0, 0, 24, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 17, 17, 16, 16, 18, 18, 16, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 20, 25, 21, 19, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 17, 21, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 21
                              DB  18, 17, 16, 17, 0, 0, 20, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 18, 16, 18, 18, 17, 18, 21, 21
                              DB  18, 18, 17, 17, 18, 20, 20, 19, 17, 17, 18, 19, 21, 224, 16, 17, 17, 18, 21, 18, 18, 19, 17, 18, 21, 19, 17, 18, 224, 18, 19, 20, 31, 17, 16, 17, 18, 19, 20, 17
                              DB  18, 18, 17, 19, 21, 17, 18, 20, 17, 18, 21, 26, 17, 18, 18, 17, 18, 21, 18, 17, 19, 21, 27, 21, 0, 26, 16, 16, 17, 18, 20, 22, 17, 18, 21, 22, 0, 18, 18, 19
                              DB  17, 18, 23, 16, 18, 18, 17, 19, 21, 16, 16, 17, 17, 18, 18, 17, 19, 21, 18, 18, 20, 17, 18, 22, 16, 18, 18, 17, 19, 21, 21, 18, 16, 0, 0, 0, 0, 0, 0, 0
                              DB  21, 16, 19, 224, 19, 21, 18, 16, 18, 19, 18, 17, 17, 16, 17, 17, 16, 16, 16, 16, 16, 16, 18, 18, 16, 16, 17, 16, 17, 19, 17, 16, 16, 16, 17, 20, 17, 16, 16, 16
                              DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 16, 224, 19, 17, 16, 16, 16, 17, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 16, 17, 17, 16, 16, 16, 16, 16
                              DB  16, 16, 17, 18, 19, 19, 16, 227, 18, 16, 16, 16, 16, 16, 16, 17, 18, 17, 16, 16, 16, 16, 16, 16, 17, 17, 16, 16, 16, 16, 20, 18, 16, 16, 16, 16, 16, 16, 16, 16
                              DB  16, 16, 16, 16, 16, 17, 17, 16, 16, 16, 16, 17, 21, 0, 0, 0, 0, 0, 0, 0, 18, 16, 28, 31, 30, 31, 31, 26, 23, 31, 31, 31, 30, 24, 24, 30, 29, 28, 26, 21
                              DB  16, 21, 30, 31, 29, 22, 16, 19, 29, 31, 30, 25, 16, 16, 21, 31, 30, 28, 23, 224, 22, 26, 22, 28, 23, 19, 20, 27, 21, 22, 26, 21, 16, 16, 26, 31, 26, 17, 21, 18
                              DB  29, 30, 29, 28, 26, 18, 28, 23, 19, 28, 23, 16, 16, 23, 30, 29, 28, 26, 21, 23, 27, 22, 18, 16, 16, 16, 16, 29, 31, 29, 25, 21, 17, 28, 24, 20, 17, 16, 23, 26
                              DB  22, 27, 23, 224, 25, 30, 29, 28, 26, 20, 30, 31, 22, 26, 25, 23, 27, 22, 18, 24, 25, 224, 27, 24, 19, 26, 30, 29, 28, 26, 19, 16, 24, 0, 0, 0, 0, 0, 0, 0
                              DB  17, 16, 27, 31, 25, 27, 31, 24, 23, 31, 29, 29, 31, 24, 24, 31, 31, 31, 31, 23, 23, 31, 26, 28, 31, 19, 20, 30, 27, 27, 30, 23, 16, 16, 21, 30, 31, 31, 31, 26
                              DB  26, 31, 31, 31, 31, 28, 24, 31, 26, 27, 31, 26, 16, 16, 26, 31, 23, 26, 31, 19, 29, 31, 31, 31, 31, 21, 31, 30, 22, 31, 29, 16, 16, 24, 30, 31, 31, 31, 24, 28
                              DB  31, 31, 31, 29, 20, 16, 17, 26, 30, 31, 31, 30, 19, 31, 31, 31, 31, 27, 28, 31, 31, 31, 31, 26, 26, 30, 31, 31, 31, 22, 30, 31, 18, 30, 31, 30, 31, 31, 23, 28
                              DB  31, 22, 30, 31, 21, 27, 31, 31, 31, 31, 20, 16, 31, 0, 0, 0, 0, 0, 0, 0, 18, 16, 25, 31, 21, 23, 31, 22, 21, 31, 24, 22, 31, 23, 23, 31, 23, 18, 19, 18
                              DB  26, 31, 28, 18, 18, 16, 22, 31, 30, 224, 19, 16, 16, 16, 20, 31, 25, 24, 31, 23, 224, 31, 27, 22, 31, 25, 19, 31, 26, 22, 31, 23, 16, 16, 24, 31, 24, 27, 31, 224
                              DB  28, 31, 224, 18, 20, 17, 31, 30, 18, 31, 27, 16, 16, 16, 21, 30, 25, 19, 18, 26, 31, 26, 30, 31, 19, 16, 16, 29, 30, 18, 22, 23, 17, 31, 30, 27, 31, 28, 20, 31
                              DB  25, 24, 31, 23, 16, 23, 31, 23, 19, 17, 28, 31, 17, 23, 31, 22, 27, 31, 227, 24, 31, 21, 28, 31, 224, 25, 31, 21, 18, 20, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  22, 16, 25, 31, 23, 24, 31, 22, 21, 31, 29, 27, 30, 20, 23, 31, 29, 27, 17, 16, 17, 28, 31, 31, 27, 16, 16, 25, 31, 31, 29, 18, 17, 16, 20, 31, 29, 27, 31, 22
                              DB  18, 31, 27, 21, 31, 24, 19, 31, 26, 22, 31, 23, 16, 16, 24, 31, 31, 31, 25, 16, 28, 31, 27, 24, 16, 16, 31, 30, 18, 31, 27, 16, 17, 17, 21, 31, 24, 16, 16, 25
                              DB  31, 227, 28, 31, 18, 16, 16, 29, 31, 17, 16, 16, 17, 31, 29, 19, 31, 26, 20, 31, 25, 23, 31, 23, 16, 23, 31, 22, 16, 16, 28, 31, 17, 23, 31, 22, 26, 31, 19, 24
                              DB  31, 21, 28, 31, 224, 25, 31, 28, 26, 16, 16, 18, 0, 0, 0, 0, 0, 0, 0, 0, 22, 16, 25, 31, 31, 31, 31, 22, 21, 31, 29, 29, 31, 23, 23, 31, 31, 29, 17, 18
                              DB  16, 18, 26, 29, 31, 25, 16, 16, 25, 26, 31, 28, 16, 16, 20, 31, 29, 28, 31, 22, 18, 31, 27, 21, 31, 24, 19, 31, 26, 22, 31, 23, 16, 16, 24, 31, 29, 31, 31, 18
                              DB  28, 31, 31, 26, 16, 16, 31, 30, 18, 31, 27, 16, 18, 17, 21, 31, 24, 16, 16, 25, 31, 227, 28, 31, 18, 16, 16, 29, 31, 17, 17, 17, 17, 31, 29, 19, 31, 26, 20, 31
                              DB  25, 23, 31, 23, 16, 23, 31, 22, 16, 16, 28, 31, 17, 23, 31, 22, 26, 31, 19, 24, 31, 21, 28, 31, 224, 25, 31, 31, 28, 16, 17, 19, 18, 18, 227, 19, 18, 19, 24, 0
                              DB  23, 16, 25, 31, 28, 28, 21, 16, 21, 31, 24, 22, 31, 23, 23, 31, 24, 17, 16, 16, 16, 20, 227, 19, 29, 29, 16, 224, 21, 18, 27, 30, 17, 16, 20, 31, 25, 23, 31, 22
                              DB  18, 31, 27, 21, 31, 25, 19, 31, 27, 22, 31, 23, 16, 16, 24, 31, 22, 27, 31, 224, 28, 31, 19, 17, 16, 17, 31, 30, 19, 31, 27, 16, 18, 17, 21, 31, 23, 16, 16, 26
                              DB  31, 20, 28, 31, 18, 16, 18, 30, 30, 17, 16, 17, 17, 31, 29, 19, 31, 26, 20, 31, 25, 23, 31, 23, 16, 24, 31, 21, 16, 16, 28, 31, 17, 23, 31, 22, 26, 31, 19, 24
                              DB  31, 22, 28, 31, 19, 25, 31, 22, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 16, 28, 31, 25, 16, 16, 16, 23, 31, 29, 24, 31, 28, 23, 31, 31, 28, 22, 16
                              DB  17, 30, 31, 30, 29, 22, 16, 28, 31, 31, 29, 26, 16, 16, 23, 31, 29, 26, 31, 27, 21, 31, 30, 22, 31, 29, 23, 31, 31, 30, 31, 23, 16, 16, 26, 31, 26, 28, 31, 24
                              DB  28, 31, 30, 26, 19, 19, 31, 31, 30, 31, 27, 16, 19, 16, 24, 31, 28, 16, 16, 28, 31, 30, 30, 30, 17, 16, 22, 31, 31, 29, 29, 26, 227, 31, 31, 30, 31, 26, 23, 31
                              DB  29, 23, 31, 27, 16, 26, 31, 26, 16, 17, 30, 31, 22, 25, 31, 27, 26, 31, 24, 28, 31, 31, 31, 31, 26, 25, 31, 30, 27, 20, 16, 25, 22, 18, 25, 19, 22, 24, 16, 17
                              DB  17, 16, 23, 28, 22, 16, 19, 16, 21, 27, 25, 21, 27, 25, 20, 26, 30, 31, 25, 16, 17, 23, 27, 30, 20, 16, 16, 22, 26, 29, 23, 16, 16, 16, 21, 27, 25, 22, 28, 23
                              DB  19, 26, 27, 19, 27, 25, 19, 24, 28, 27, 31, 23, 16, 16, 23, 28, 23, 24, 28, 227, 23, 28, 31, 31, 19, 17, 23, 27, 27, 31, 27, 16, 18, 16, 22, 27, 24, 16, 16, 23
                              DB  28, 31, 31, 26, 16, 16, 19, 24, 28, 31, 31, 28, 19, 25, 29, 31, 31, 19, 20, 27, 25, 21, 27, 23, 16, 23, 28, 22, 16, 17, 25, 29, 18, 22, 27, 23, 23, 28, 20, 21
                              DB  25, 29, 23, 28, 23, 22, 27, 30, 31, 23, 16, 26, 27, 19, 29, 21, 24, 29, 16, 17, 18, 17, 16, 16, 16, 17, 19, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 19, 18, 16
                              DB  17, 16, 16, 16, 16, 18, 17, 16, 16, 16, 16, 17, 18, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 22, 24, 25, 31, 23, 16, 17, 16, 16, 16, 16, 16, 16
                              DB  16, 16, 17, 20, 17, 16, 19, 26, 23, 31, 27, 16, 18, 17, 16, 16, 16, 16, 17, 16, 16, 17, 21, 20, 16, 17, 17, 16, 16, 17, 18, 16, 16, 16, 16, 18, 22, 16, 16, 16
                              DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 20, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 19
                              DB  0, 23, 20, 224, 17, 18, 0, 31, 22, 19, 17, 17, 19, 17, 17, 19, 17, 17, 16, 17, 0, 23, 19, 17, 18, 0, 0, 24, 19, 17, 18, 26, 0, 0, 23, 18, 17, 18, 19, 17
                              DB  18, 19, 17, 17, 19, 17, 16, 27, 31, 31, 31, 22, 16, 27, 20, 224, 17, 18, 224, 17, 19, 19, 17, 16, 16, 16, 23, 31, 31, 31, 26, 16, 20, 16, 22, 19, 17, 18, 31, 21
                              DB  19, 17, 16, 16, 17, 0, 26, 20, 18, 17, 17, 18, 19, 19, 18, 17, 16, 16, 224, 19, 17, 17, 19, 17, 18, 21, 224, 17, 18, 28, 19, 18, 17, 20, 19, 17, 17, 224, 17, 18
                              DB  19, 18, 17, 19, 17, 18, 19, 17, 17, 16, 18, 19, 17, 17, 18, 17, 19, 17, 17, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 23, 20, 23
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 31, 0, 0, 31, 0, 17, 16, 17, 22, 26, 29, 18, 17, 0, 0, 0, 0, 31, 0, 0
                              DB  0, 0, 0, 24, 18, 16, 17, 20, 25, 29, 22, 16, 27, 0, 0, 0, 0, 31, 0, 0, 0, 0, 26, 19, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 22, 20, 25, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 31, 0, 0, 27, 20, 23, 0, 0, 31, 0, 0, 31, 0, 31, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 22, 18, 17, 16, 16, 16, 16, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 18, 17, 17, 16, 16, 16, 17, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 227, 18, 17, 224, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 23, 23, 22, 18, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                              DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

    ; FIRSTNAME               DB      16,?, 16 DUP('$')
    ; WASTE                   DB      50 DUP('$')
    ; SECONDNAME              DB      16,?, 16 DUP('$')

    ;USERNAMES
    FIRSTNAME                 DB  16 DUP('$')
    SECONDNAME                DB  16 DUP('$')


    ;NOTES
    NOTE1                     DB  'THE NAMES MUST NOT EXCEED 15 CHARACTERS', '$'
    NOTE2                     DB  "DON'T START WITH NUMBERS, SPECIAL CHARS", '$'

    ;INSTRUCTIONS
    INSTRUCTION1              DB  'TO START THE GAME PRESS F2...', '$'
    INSTRUCTION2              DB  'TO END THE PROGRAM PRESS ESC...', '$'

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;   car data   ;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;CarImage
    CarImg1                   DB  17, 192, 17, 192, 17, 192, 0, 17, 122, 122, 122, 122, 192, 0, 0, 122, 9, 9, 122, 0, 0, 0, 122, 9, 192, 192, 192, 17, 0, 122, 9, 9, 122, 0, 0, 17, 122, 122, 122, 122
                              DB  192, 0, 17, 192, 17, 192, 17, 192, 0
    CarImg2                   DB  17, 192, 17, 192, 17, 192, 0, 17, 122, 122, 122, 122, 192, 0, 0, 122, 43, 43, 122, 0, 0, 0, 122, 43, 192, 192, 192, 17, 0, 122, 43, 43, 122, 0, 0, 17, 122, 122, 122, 122
                              DB  192, 0, 17, 192, 17, 192, 17, 192, 0

    CarImg1Up                 DB  0, 0, 0, 17, 0, 0, 0, 192, 192, 0, 192, 0, 192, 192, 17, 122, 122, 192, 122, 122, 17, 192, 122, 9, 192, 9, 122, 192, 17, 122, 9, 9, 9, 122, 17, 192, 122, 122, 122, 122
                              DB  122, 192, 17, 17, 0, 0, 0, 17, 17
    CarImg1Right              DB  17, 192, 17, 192, 17, 192, 0, 17, 122, 122, 122, 122, 192, 0, 0, 122, 9, 9, 122, 0, 0, 0, 122, 9, 192, 192, 192, 17, 0, 122, 9, 9, 122, 0, 0, 17, 122, 122, 122, 122
                              DB  192, 0, 17, 192, 17, 192, 17, 192, 0
    CarImg1Down               DB  17, 17, 0, 0, 0, 17, 17, 192, 122, 122, 122, 122, 122, 192, 17, 122, 9, 9, 9, 122, 17, 192, 122, 9, 192, 9, 122, 192, 17, 122, 122, 192, 122, 122, 17, 192, 192, 0, 192, 0
                              DB  192, 192, 0, 0, 0, 17, 0, 0, 0
    CarImg1Left               DB  0, 192, 17, 192, 17, 192, 17, 0, 192, 122, 122, 122, 122, 17, 0, 0, 122, 9, 9, 122, 0, 17, 192, 192, 192, 9, 122, 0, 0, 0, 122, 9, 9, 122, 0, 0, 192, 122, 122, 122
                              DB  122, 17, 0, 192, 17, 192, 17, 192, 17

    CarImg2Up                 DB  0, 0, 0, 17, 0, 0, 0, 192, 192, 0, 192, 0, 192, 192, 17, 122, 122, 192, 122, 122, 17, 192, 122, 43, 192, 43, 122, 192, 17, 122, 43, 43, 43, 122, 17, 192, 122, 122, 122, 122
                              DB  122, 192, 17, 17, 0, 0, 0, 17, 17
    CarImg2Right              DB  17, 192, 17, 192, 17, 192, 0, 17, 122, 122, 122, 122, 192, 0, 0, 122, 43, 43, 122, 0, 0, 0, 122, 43, 192, 192, 192, 17, 0, 122, 43, 43, 122, 0, 0, 17, 122, 122, 122, 122
                              DB  192, 0, 17, 192, 17, 192, 17, 192, 0
    CarImg2Down               DB  17, 17, 0, 0, 0, 17, 17, 192, 122, 122, 122, 122, 122, 192, 17, 122, 43, 43, 43, 122, 17, 192, 122, 43, 192, 43, 122, 192, 17, 122, 122, 192, 122, 122, 17, 192, 192, 0, 192, 0
                              DB  192, 192, 0, 0, 0, 17, 0, 0, 0
    CarImg2Left               DB  0, 192, 17, 192, 17, 192, 17, 0, 192, 122, 122, 122, 122, 17, 0, 0, 122, 43, 43, 122, 0, 17, 192, 192, 192, 43, 122, 0, 0, 0, 122, 43, 43, 122, 0, 0, 192, 122, 122, 122
                              DB  122, 17, 0, 192, 17, 192, 17, 192, 17
        
    Car1Speed                 DW  2
    Car2Speed                 DW  2
    CurrentSpeed              DW  ?                                                                                                                                                                                                      ;Stores the speed of the currently updating car
    
    Car1SpeedUPTimer          DB  ?
    Car2SpeedUPTimer          DB  ?

    Car1SpeedUpCounter        DB  0
    Car2SpeedUpCounter        DB  0


    ;CarDimensions
    CAR_SIZE                  EQU 7
    PosXfirst                 DW  ?
    PosYfirst                 DW  ?
    PosXsecond                DW  ?
    PosYsecond                DW  ?

    PosX                      DW  ?
    PosY                      DW  ?
        
    ;previous postions to check for updates
    PrevPosXfirst             DW  ?
    PrevPosYfirst             DW  ?
    PrevPosXsecond            DW  ?
    PrevPosYsecond            DW  ?

    ;CarTodraw  info
    CarToDrawSize             DW  ?
    CarToDraw                 DW  ?
    CarToDrawX                DW  ?
    CarToDrawY                DW  ?

    ; Screen Info
    SCREEN_WIDTH              EQU 320
    SCREEN_HEIGHT             EQU 200
    SCREEN_SIZE               EQU SCREEN_WIDTH*SCREEN_HEIGHT

    ; ;Buffer for reading input keys
    ; BufferSize     EQU  30000
    ; Buffer         DB   BufferSize DUP(?)
    ; bufferHead     DW   0
    ; bufferTail     DW   0

    ;ButtonFlags
    UpFlag                    DB  ?
    DownFlag                  DB  ?
    LeftFlag                  DB  ?
    RightFlag                 DB  ?
    KFlag                     DB  ?
    MFlag                     DB  ?
    F4Flag                    DB  ?
    F2Flag                    DB  ?
    EscFlag                   DB  ?

    ;Arrow flags to check whether this key is pressed down or not
    ArrowUpFlag               DB  0
    ArrowDownFlag             DB  0
    ArrowLeftFlag             DB  0
    ArrowRightFlag            DB  0
    LetterKFlag               DB  0
    LetterMFlag               DB  0
    LetterF4Flag              DB  0
    LetterF2Flag              DB  0
    LetterEscFlag             DB  0
   
    ;WASD flags to check whether this key is pressed down or not
    WFlag                     DB  0
    AFlag                     DB  0
    SFlag                     DB  0
    DFlag                     DB  0

    ;Arrow Keys for movement
    ArrowUp                   DB  48H
    ArrowDown                 DB  50H
    ArrowLeft                 DB  4BH
    ArrowRight                DB  4DH
    LetterK                   DB  25h
    LetterM                   DB  32H
    LetterF4                  DB  3EH
    LetterF2                  DB  60
    LetterEsc                 DB  1H

    ;WASD keys for movement
    WKey                      db  11h
    AKey                      db  1Eh
    SKey                      db  1Fh
    DKey                      db  20h

    ;Used to save scan codes to indicate the used system of movement(WASD or arrows)
    UpKeyCode                 DB  ?
    DownKeyCode               DB  ?
    LeftKeyCode               DB  ?
    RightKeyCode              DB  ?
    DeletePower1Key           DB  ?
    DeletePower2Key           DB  ?
    F4KeyCode                 DB  ?
    F2KeyCode                 DB  ?
    EscKeyCode                DB  ?

    ;Boolean to indicate if the path the car is going to move in is safe or not
    ;0 -> Safe , 1->Not Safe
    CanUpdateX                DB  0
    CanUpdateY                DB  0

    ;boolean (up -> 1 or down -> 0)
    YMovement                 DB  ?
    ;boolean (right -> 1 or left -> 0)
    XMovement                 DB  ?
    ;boolean (CAR1 -> 1 or CAR2 -> 0)
    CarToScan                 DB  ?

    ;Buffer to store the background to save it upon movement
    BackgroundBuffer1         DB  Car_Size*Car_Size DUP(?)
    BackgroundBuffer2         DB  Car_Size*Car_Size DUP(?)

    ;Data for the status bar (First Player's data)
    player1PosX               EQU 0
    player1PosY               EQU 22
   

    ;Data for the status bar (Second Player's data)
    player2PosX               EQU 65
    player2PosY               EQU 22


    ; Data for the powerups
    powerupMessage            DB  'Powerup :', '$'

    powerup1Posx              EQU 125
    powerup1Posy              EQU 177

    powerup2Posx              EQU 285
    powerup2Posy              EQU 177

    powerupToDraw             DW  ?
    powerupToDrawPosX         DW  ?
    powerupToDrawPosY         DW  ?

    powerupParent             DB  ?
    powerupType               DB  ?

    catchedIndex              DW  ?

    verticalFlag              DB  ?
    horizontalFlag            DB  ?

    ;Status Bar Variables
    StatusBarStartX           DW  ?
    StatusBarStartY           DW  ?
    StatusBarTotalheight      DW  ?
    STATUS_BAR_COLOR          EQU 8
    STATUS_BAR_COLOR2         EQU 7

    ;Drawing line variables
    LineToDrawH               DW  ?
    LineToDrawW               DW  ?
    DrawingColor              DW  ?

    ;Game Timer Variable
    PreviousMinute            DB  0
    PreviousSecond            DB  0
    CountMinute               DB  0
    CountSecond               DB  0
    TotalSeconds              DB  0
    TimerFinished             DB  0
    TimerMsg                  DB  'Time' , '$'
    
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;   road data   ;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


    ;BACKGROUND
    BACKGROUNDIMAGEPARTH      EQU 16
    BACKGROUNDIMAGEPARTW      EQU 16
    VERTICALBACKGROUNDPARTSNO EQU 11
    BACKGROUNDIMAGEPART       DB  142, 203, 142, 142, 71, 142, 203, 142, 143, 203, 142, 142, 142, 71, 142, 142, 71, 142, 203, 142, 71, 142, 203, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 203, 142, 142, 142, 142, 142
                              DB  71, 142, 142, 142, 203, 142, 142, 71, 142, 142, 142, 142, 143, 142, 142, 142, 142, 71, 142, 203, 142, 142, 143, 71, 142, 143, 142, 142, 142, 142, 142, 142, 142, 71, 142, 203, 142, 142, 142, 71
                              DB  142, 142, 142, 71, 142, 142, 142, 142, 142, 142, 142, 142, 142, 203, 142, 142, 142, 142, 142, 142, 71, 142, 203, 142, 142, 143, 142, 142, 142, 203, 142, 142, 142, 203, 142, 142, 71, 142, 142, 203
                              DB  142, 142, 142, 142, 142, 142, 142, 203, 142, 142, 203, 142, 71, 142, 142, 203, 142, 142, 142, 71, 142, 142, 203, 142, 142, 142, 203, 142, 142, 142, 142, 142, 142, 142, 71, 142, 142, 203, 142, 143
                              DB  142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 71, 142, 142, 203, 142, 142, 143, 142, 142, 142, 203, 142, 142, 71, 142, 142, 142, 142, 142, 142, 142, 142, 71, 142, 142, 203, 142, 142, 71, 142
                              DB  143, 142, 142, 142, 143, 142, 142, 142, 142, 71, 142, 203, 142, 142, 71, 142, 142, 142, 203, 142, 142, 142, 71, 142, 142, 71, 142, 142, 142, 142, 71, 142, 142, 203, 142, 142, 142, 71, 142, 142
                              DB  142, 143, 142, 71, 142, 203, 142, 142, 142, 203, 142, 143, 142, 71, 142, 142
    SCREENWIDTH               EQU 320
    SCREENHEIGHT              EQU 200


    ;OBSTACLE
    THRESHOLD                 EQU 14
    OBSTACLEW                 EQU 5
    OBSTACLEH                 EQU 5
    OBSTACLE                  DB  16, 16, 16, 16, 16, 16, 28, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
    XOBSTACLE                 DW  ?
    YOBSTACLE                 DW  ?
    
    ;Variable to detect if the car can pass an obstacle and is still touching it
    Touching1                 DB  0
    Touching2                 DB  0
    InObstacle1               DB  0
    InObstacle2               DB  0
    TopleftObstX              DW  ?                                                                                                                                                                                                      ;(XY)
    TopleftObstY              DW  ?                                                                                                                                                                                                      ;(XY)
    ObstacleCollisionCount    DB  0
    ;POWERUPS
    POWERW                    EQU 3
    POWERH                    EQU 3
    CREATEOBSTPOWER           DB  36, 36, 36, 36, 17, 36, 36, 36, 36
    PASSOBSTPOWER             DB  36, 36, 36, 36, 28, 36, 36, 36, 36
    DECSPEEDPOWER             DB  36, 36, 36, 112, 112, 112, 36, 36, 36
    INCSPEEDPOWER             DB  36, 121, 36, 121, 121, 121, 36, 121, 36

    BIGPOWERW                 EQU 9
    BIGPOWERH                 EQU 9
    BIGCREATEOBSTPOWER        DB  36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 17, 17, 17, 36, 36, 36, 36, 36, 36, 17
                              DB  17, 17, 36, 36, 36, 36, 36, 36, 17, 17, 17, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36
                              DB  36
    BIGPASSOBSTPOWER          DB  36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 28, 28, 28, 36, 36, 36, 36, 36, 36, 28
                              DB  28, 28, 36, 36, 36, 36, 36, 36, 28, 28, 28, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36
                              DB  36
    BIGDECSPEEDPOWER          DB  36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112
                              DB  112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36
                              DB  36
    BIGINCSPEEDPOWER          DB  36, 36, 36, 121, 121, 121, 36, 36, 36, 36, 36, 36, 121, 121, 121, 36, 36, 36, 36, 36, 36, 121, 121, 121, 36, 36, 36, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121
                              DB  121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 36, 36, 36, 121, 121, 121, 36, 36, 36, 36, 36, 36, 121, 121, 121, 36, 36, 36, 36, 36, 36, 121, 121, 121, 36, 36
                              DB  36
    ;STORING ROAD UNDER POWERUPS TO DRAW IT AGAIN WHEN IT'S COLLECTED
    TOPLEFTPOWER              DW  45 DUP(?)
    ROADUNDERPOWER            DB  405 DUP(?)
    ISVISIBLEPOWER            DB  45 DUP(?)
    ; TOPLEFTPOWER            DW      45 DUP(?)
    ; ROADUNDERPOWER          DB      40 DUP(2)
    POWERUPCOUNTER            DW  0
    CURPOWERINDEX             DW  0
    POWERTOPLEFTBYTE          DW  ?
    INDEXSTARTSHOWING         DW  0                                                                                                                                                                                                      ; INDEX TO START SHOWING THE HIDDEN POWER FROM

    ;CURRENT SECOND
    CURSECOND                 DB  61
    DURATIONTOSHOWPOWER       EQU 2

    ;PROBABILITY OF DRAWING A POWERUP OR AN OBSTACLE %
    POWERPROBABILITY          DB  60
    OBSTPROBABILITY           DB  60
    POWERVISIBPROBABILITY     DB  60


    ;CAR
    CARIMGW                   EQU 6
    CARIMGH                   EQU 6
    CARIMG                    DB  142, 142, 0, 0, 142, 142, 142, 46, 46, 46, 46, 142, 0, 46, 16, 112, 46, 0, 0, 46, 112, 16, 46, 0, 142, 46, 46, 46, 46, 142, 142, 142, 0, 0, 142, 142

    ;START FLAG
    STARTFLAGIMGW             EQU 4
    STARTFLAGIMGH             EQU 20
    STARTFLAGIMG              DB  16, 16, 29, 29, 16, 16, 29, 29, 29, 29, 16, 16, 29, 29, 16, 16, 16, 16, 29, 29, 16, 16, 29, 29, 29, 29, 16, 16, 29, 29, 16, 16, 16, 16, 29, 29, 16, 16, 29, 29
                              DB  29, 29, 16, 16, 29, 29, 16, 16, 16, 16, 29, 29, 16, 16, 29, 29, 29, 29, 16, 16, 29, 29, 16, 16, 16, 16, 29, 29, 16, 16, 29, 29, 29, 29, 16, 16, 29, 29, 16, 16

    ;END FLAG
    HORENDFLAGIMGW            EQU 20
    HORENDFLAGIMGH            EQU 6
    HORENDFLAGIMG             DB  31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40
                              DB  31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31
                              DB  40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31, 40, 40, 31, 31
    VERENDFLAGIMGW            EQU 6
    VERENDFLAGIMGH            EQU 20
    VERENDFLAGIMG             DB  40, 40, 40, 31, 31, 31, 40, 40, 40, 31, 31, 31, 31, 31, 31, 40, 40, 40, 31, 31, 31, 40, 40, 40, 40, 40, 40, 31, 31, 31, 40, 40, 40, 31, 31, 31, 31, 31, 31, 40
                              DB  40, 40, 31, 31, 31, 40, 40, 40, 40, 40, 40, 31, 31, 31, 40, 40, 40, 31, 31, 31, 31, 31, 31, 40, 40, 40, 31, 31, 31, 40, 40, 40, 40, 40, 40, 31, 31, 31, 40, 40
                              DB  40, 31, 31, 31, 31, 31, 31, 40, 40, 40, 31, 31, 31, 40, 40, 40, 40, 40, 40, 31, 31, 31, 40, 40, 40, 31, 31, 31, 31, 31, 31, 40, 40, 40, 31, 31, 31, 40, 40, 40

    ;TEMPORARY X AND Y
    TEMPX                     DW  ?
    TEMPY                     DW  ?

    ;WE SAVE LAST DIRECTION TO PRINT THE END RACE LINE
    LASTDIR                   DW  ?
    LASTDI                    DW  ?

    ;TEMPORARY VARIABLE
    TMP                       DW  ?
    TMP1                      DW  ?
    TMP2                      DW  ?
    TMP3                      DW  ?
    TMP4                      DW  ?
    TMP5                      DW  ?
    TMP6                      DW  ?

    ;INFINITELOOP RANDOMIZATIONS STORAGE
    CANTUP                    DW  0
    CANTRIGHT                 DW  0
    CANTDOWN                  DW  0
    CANTLEFT                  DW  0

    ;COUNTERS FOR CHECKDRAW
    OUTCOUNTER                DW  ?
    INCOUNTER                 DW  ?
    FIRSTBYTEINROW            DW  ?

    ;RANGEOFRAND
    RANGEOFRAND               DB  ?

    ;STARTdd
    STARTROADX                EQU 2
    STARTROADY                EQU 2
    NUMBEROFPARTS             EQU 100
    MINNUMOFPARTS             EQU 10

    ;VARIABLES FOR DRAWIMAGE PROCEDURE
    IMGTODRAW                 DW  ?
    WIDTODRAW                 DW  ?
    HEITODRAW                 DW  ?
    STARXTODRAW               DW  ?
    STARYTODRAW               DW  ?

    ;CONSTRAINTS          ;;;; 10 GAB IS LET
    XNOLEFT                   EQU 22
    XNORIGHT                  EQU 268
    YNOUP                     EQU 22
    YNODOWN                   EQU 124

    ;DIRECTIONS
    UPDIR                     DW  ?
    RIGHTDIR                  DW  ?
    DOWNDIR                   DW  ?
    LEFTDIR                   DW  ?

    ;TMP
    TMPIMG                    DB  4, 4, 4, 4

    ;CHECKLINE IMAGES
    VERCHECKLINEIMGW          EQU 1
    VERCHECKLINEIMGH          EQU 20
    HORCHECKLINEIMGW          EQU 20
    HORCHECKLINEIMGH          EQU 1
    CHECKLINEIMG              DB  0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0
    ISVERTICALCHECKLINE       DW  ?

    CHECKLINESVERTICIES       DW  NUMBEROFPARTS DUP('?')
    CHECKLINEVERTEX           DW  ?
    INDEXOFPART               DW  0
    CAR1PARTSVIS              DW  0
    CAR2PARTSVIS              DW  0
    CAR1VIS                   DB  NUMBEROFPARTS DUP(0)
    CAR2VIS                   DB  NUMBEROFPARTS DUP(0)


    EXITSTATUS                DB  ?
    WINNER                    DB  ?
    CAR1SCORE                 DW  0
    CAR2SCORE                 DW  0

    WONMESSAGE                DB  ' WON', '$'

    ;ROAD IMAGES
    VERROADIMGW               EQU 20
    VERROADIMGH               EQU 30
    VERROADIMG                DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 31, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 31, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 31, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 31, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 31, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 31, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 31, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 31, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 31, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 31, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 31, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 31, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
    HORROADIMGW               EQU 30
    HORROADIMGH               EQU 20
    HORROADIMG                DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 31, 31
                              DB  31, 20, 20, 31, 31, 31, 31, 20, 20, 31, 31, 31, 31, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 31, 31, 31, 20, 20, 31, 31, 31, 31, 20, 20, 31
                              DB  31, 31, 31, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
                              DB  20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20
.CODE
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;     car procedures      ;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SearchForLeftVertex PROC FAR
                                MOV                DX,BX
    ; PUSH BX
    ; MOV BX,DX
                                SUB                BX , 1                                                                                                                            ;CHECKING whether the collided bit of the powerup is the left one
                                CMP                BYTE PTR ES:[BX] , 20                                                                                                             ; 20 is the GREY color degree of the road
                                JE                 LEFT_CHECKED
                                CMP                BYTE PTR ES:[BX] , 31                                                                                                             ; 31 is the WHITE color degree of the road
                                JE                 LEFT_CHECKED
                                CMP                BYTE PTR ES:[BX] , 142                                                                                                            ; 142 is COLOR DEGREE FOR THE GRASS
                                JE                 LEFT_CHECKED
                                CMP                BYTE PTR ES:[BX] , 203                                                                                                            ; 203 is the COLOR DEGREE FOR THE GRASS
                                JE                 LEFT_CHECKED
                                CMP                BYTE PTR ES:[BX] , 71                                                                                                             ; 71 is the COLOR DEGREE FOR THE GRASS
                                JE                 LEFT_CHECKED
                                CMP                BYTE PTR ES:[BX] , 16                                                                                                             ; 71 is the COLOR DEGREE FOR THE GRASS
                                JE                 LEFT_CHECKED
                                MOV                BX ,DX

    ; MOV DX,BX
    ; PUSH BX
    ; MOV BX,DX
                                INC                BX                                                                                                                                ; CHECKING whether the collided bit of the powerup is the right one
                                CMP                BYTE PTR ES:[BX] , 20                                                                                                             ; 20 is the GREY color degree of the road
                                JE                 RIGHT_CHECKED
                                CMP                BYTE PTR ES:[BX] , 31                                                                                                             ; 31 is the WHITE color degree of the road
                                JE                 RIGHT_CHECKED
                                CMP                BYTE PTR ES:[BX] , 142                                                                                                            ; 142 is COLOR DEGREE FOR THE GRASS
                                JE                 RIGHT_CHECKED
                                CMP                BYTE PTR ES:[BX] , 203                                                                                                            ; 203 is the COLOR DEGREE FOR THE GRASS
                                JE                 RIGHT_CHECKED
                                CMP                BYTE PTR ES:[BX] , 71                                                                                                             ; 71 is the COLOR DEGREE FOR THE GRASS
                                JE                 RIGHT_CHECKED
                                CMP                BYTE PTR ES:[BX] , 16                                                                                                             ; 71 is the COLOR DEGREE FOR THE GRASS
                                JE                 RIGHT_CHECKED
    ; POP BX
                                MOV                BX ,DX

                                JMP                MIDDLE_CHECKED

    LEFT_CHECKED:               
                                ADD                BX ,2
                                SUB                BX , SCREEN_WIDTH
                                CMP                BYTE PTR ES:[BX] , 20                                                                                                             ; 20 is the GREY color degree of the road
                                JE                 IAM_AT_TOP
                                CMP                BYTE PTR ES:[BX] , 31                                                                                                             ; 31 is the WHITE color degree of the road
                                JE                 IAM_AT_TOP
                                CMP                BYTE PTR ES:[BX] , 142                                                                                                            ; 142 is COLOR DEGREE FOR THE GRASS
                                JE                 IAM_AT_TOP
                                CMP                BYTE PTR ES:[BX] , 203                                                                                                            ; 203 is the COLOR DEGREE FOR THE GRASS
                                JE                 IAM_AT_TOP
                                CMP                BYTE PTR ES:[BX] , 71                                                                                                             ; 71 is the COLOR DEGREE FOR THE GRASS
                                JE                 IAM_AT_TOP
                                CMP                BYTE PTR ES:[BX] , 16                                                                                                             ; 71 is the COLOR DEGREE FOR THE GRASS
                                JE                 IAM_AT_TOP
                                RET

    IAM_AT_TOP:                 
                                ADD                BX , SCREEN_WIDTH
                                ADD                BX , SCREEN_WIDTH
                                RET

    RIGHT_CHECKED:              
                                SUB                BX ,2
                                SUB                BX , SCREEN_WIDTH
                                CMP                BYTE PTR ES:[BX] , 20                                                                                                             ; 20 is the GREY color degree of the road
                                JE                 IAM_AT_TOP
                                CMP                BYTE PTR ES:[BX] , 31                                                                                                             ; 31 is the WHITE color degree of the road
                                JE                 IAM_AT_TOP
                                CMP                BYTE PTR ES:[BX] , 142                                                                                                            ; 142 is COLOR DEGREE FOR THE GRASS
                                JE                 IAM_AT_TOP
                                CMP                BYTE PTR ES:[BX] , 203                                                                                                            ; 203 is the COLOR DEGREE FOR THE GRASS
                                JE                 IAM_AT_TOP
                                CMP                BYTE PTR ES:[BX] , 71                                                                                                             ; 71 is the COLOR DEGREE FOR THE GRASS
                                JE                 IAM_AT_TOP
                                CMP                BYTE PTR ES:[BX] , 16                                                                                                             ; 71 is the COLOR DEGREE FOR THE GRASS
                                JE                 IAM_AT_TOP
                                RET

    MIDDLE_CHECKED:             
                                SUB                BX , SCREEN_WIDTH
                                CMP                BYTE PTR ES:[BX] , 20                                                                                                             ; 20 is the GREY color degree of the road
                                JE                 IAM_AT_TOP
                                CMP                BYTE PTR ES:[BX] , 31                                                                                                             ; 31 is the WHITE color degree of the road
                                JE                 IAM_AT_TOP
                                CMP                BYTE PTR ES:[BX] , 142                                                                                                            ; 142 is COLOR DEGREE FOR THE GRASS
                                JE                 IAM_AT_TOP
                                CMP                BYTE PTR ES:[BX] , 203                                                                                                            ; 203 is the COLOR DEGREE FOR THE GRASS
                                JE                 IAM_AT_TOP
                                CMP                BYTE PTR ES:[BX] , 71                                                                                                             ; 71 is the COLOR DEGREE FOR THE GRASS
                                JE                 IAM_AT_TOP
                                CMP                BYTE PTR ES:[BX] , 16                                                                                                             ; 71 is the COLOR DEGREE FOR THE GRASS
                                JE                 IAM_AT_TOP
                                RET


SearchForLeftVertex ENDP

CalculatePowerupVertex PROC FAR
                                MOV                DI , 0
                                MOV                AX , TEMPY
                                MOV                BX , SCREEN_WIDTH
                                MUL                BX
                                ADD                AX , TEMPX
                                MOV                DI , AX
                                RET
CalculatePowerupVertex ENDP


CalculateBoxVertex PROC FAR
                                MOV                DI , 0
                                MOV                AX , CarToDrawY
                                MOV                BX , SCREEN_WIDTH
                                MUL                BX
                                ADD                AX , CarToDrawX
                                MOV                DI , AX
                                RET
CalculateBoxVertex ENDP


    ;Moves the background of the car to be drawn in BX
CheckCarToDraw PROC FAR
                                CMP                CarToScan , 1
                                JNE                Car2Draw
                                MOV                BX ,OFFSET BackgroundBuffer1
                                RET
    Car2Draw:                   
                                MOV                BX ,OFFSET BackgroundBuffer2
                                RET
CheckCarToDraw ENDP


    ;picks the appropriate car image according to the direction of movement
    ;Needs to set carToScan by the current car (1 or 2)
    ;MOVEMENT On X change(right ->1 , left-> 0) . On Y change(up -> 1 or down -> 0)
ChooseCar1Image PROC FAR
                                MOV                DX , PrevPosXfirst
                                CMP                PosXfirst , DX
                                JE                 CheckOnY
                                JB                 LeftImage
                                
                                MOV                SI  , OFFSET CarImg1Right
                                JMP                ChooseEnded
    LeftImage:                  
                                MOV                SI  , OFFSET CarImg1Left
                                JMP                ChooseEnded

    CheckOnY:                   
                                MOV                DX , PrevPosYfirst
                                CMP                PosYfirst , DX
                                JE                 ChooseEnded
                                JA                 DownImage

                                MOV                SI , OFFSET CarImg1Up
                                JMP                ChooseEnded
                                
    DownImage:                  
                                MOV                SI , OFFSET CarImg1Down
            
    ChooseEnded:                
                                RET

ChooseCar1Image ENDP

ChooseCar2Image PROC FAR
                                MOV                DX , PrevPosXsecond
                                CMP                PosXsecond , DX
                                JE                 CheckOnY2
                                JB                 LeftImage2
                                
                                MOV                SI  , OFFSET CarImg2Right
                                JMP                ChooseEnded2
    LeftImage2:                 
                                MOV                SI  , OFFSET CarImg2Left
                                JMP                ChooseEnded2

    CheckOnY2:                  
                                MOV                DX , PrevPosYsecond
                                CMP                PosYsecond , DX
                                JE                 ChooseEnded2
                                JA                 DownImage2

                                MOV                SI , OFFSET CarImg2Up
                                JMP                ChooseEnded2
                                
    DownImage2:                 
                                MOV                SI , OFFSET CarImg2Down
            
    ChooseEnded2:               
                                RET

ChooseCar2Image ENDP


DrawCar PROC FAR
                                MOV                ax , 0A000H
                                MOV                es , ax
                                MOV                DI , 0
                                MOV                cx , CarToDrawSize
                                MOV                SI ,  CarToDraw
                                MOV                DL , 0
                                CALL               CalculateBoxVertex
                                CALL               CheckCarToDraw
                             
                                CMP                CarToScan , 1
                                JNE                GetCar2Img
                                CALL               ChooseCar1Image
                                JMP                ROWS_DRAW
    GetCar2Img:                 
                                CALL               ChooseCar2Image                                                                                                                   ;Get Background offset in BX

    ROWS_DRAW:                  
                                PUSH               CX
                                PUSH               DI

                                MOV                CX , CarToDrawSize
    COLS_DRAW:                  
                                MOV                DH , BYTE PTR ES:[DI]                                                                                                             ;Moving the byte of the road to DH to be stored in buffer
                                MOV                BYTE PTR DS:[BX] , DH                                                                                                             ;Moving DH -> the memory with offset BX
                                MOV                DL , BYTE PTR [SI]                                                                                                                ;Car byte to be drawn this iteration
                                CMP                DL, 0
                                JE                 DONTDRAWBYTECAR
                                MOV                BYTE PTR ES:[DI] , DL                                                                                                             ;Drawing the car bit
    DONTDRAWBYTECAR:            
    ;Updates
                                INC                SI
                                INC                DI
                                INC                BX
                                LOOP               COLS_DRAW

                                POP                DI
                                POP                CX
                                ADD                DI, SCREEN_WIDTH
                                LOOP               ROWS_DRAW
                                RET
DrawCar ENDP



    ;clear the car's image from the screen
ClearCarArea PROC FAR
                                MOV                ax , 0A000H
                                MOV                es , ax
                                MOV                cx , CarToDrawSize
                                CALL               CalculateBoxVertex

                                CALL               CheckCarToDraw                                                                                                                    ;Get Background offset in BX

    ROWS_CLEAR:                 
                                PUSH               CX
                                PUSH               DI
                                MOV                CX , CarToDrawSize
    COLS_CLEAR:                 
                                MOV                DL, BYTE PTR DS:[BX]                                                                                                              ;Moving road byte in dl
                                MOV                BYTE PTR ES:[DI] , DL                                                                                                             ;Moving the road byte to be printed
                                INC                DI
                                INC                BX
                                LOOP               COLS_CLEAR

                                POP                DI
                                POP                CX
                                ADD                DI, SCREEN_WIDTH
                                LOOP               ROWS_CLEAR
                                RET
ClearCarArea ENDP

    ;description
IncreaseCarSpeed PROC FAR
    ;Get current system time
                                MOV                AH, 2CH                                                                                                                           ; INTERRUPT to get system time
                                INT                21H
    ;Check which car to apply speedup on
                                CMP                CarToScan , 1
                                JNE                IncCar2Speed

                                MOV                Car1Speed , 3
                                MOV                Car1SpeedUPTimer , DH
                                JMP                incFinish
    IncCar2Speed:               
                                MOV                Car2Speed, 3
                                MOV                Car2SpeedUPTimer , DH

    incFinish:                  
                                
                                RET
IncreaseCarSpeed ENDP

DecreaseCarSpeed PROC FAR
    ;Get current system time
                                MOV                AH, 2CH                                                                                                                           ; INTERRUPT to get system time
                                INT                21H
    ;Check which car to apply speedup on
                                CMP                CarToScan , 1
                                JNE                DECCar2Speed
    ;If car 1 collected the power up, car 2 speeds down
                                MOV                Car2Speed , 1
                                MOV                Car2SpeedUPTimer , DH

                                JMP                DECFinish
    DecCar2Speed:               
                                MOV                Car1Speed, 1
                                MOV                Car1SpeedUPTimer , DH

    DecFinish:                  
                                
                                RET
DecreaseCarSpeed ENDP

    ;creates obstacle after powerup is invoked
CreateObstacle PROC FAR
                                PUSH               DI
                                PUSH               BX
                                MOV                SI , OFFSET OBSTACLE
                                CMP                CarToScan , 1
                                JNE                STORECAR2

                                MOV                BX , OFFSET BackgroundBuffer1
                                JMP                StartCreatingObs
    STORECAR2:                  
                                MOV                BX , OFFSET BackgroundBuffer2

    StartCreatingObs:           
                                MOV                CX , OBSTACLEH
    StartCopyingColumns:        
                                PUSH               CX
                                PUSH               BX
                                MOV                CX ,OBSTACLEW
    StartCopyingRows:           
                                MOV                DL , BYTE PTR DS:[SI]
                                MOV                BYTE PTR DS:[BX] , DL
                                INC                BX
                                LOOP               StartCopyingRows

                                POP                BX
                                POP                CX
                                ADD                BX , CAR_SIZE
                                LOOP               StartCopyingColumns
                                
                                POP                BX
                                POP                DI
                                RET
CreateObstacle ENDP


    ;description
PassObs PROC FAR
                                CMP                CarToScan , 1
                                JNE                PassForCar2

                                MOV                Touching1, 1
                                JMP                PassObsFinish
    PassForCar2:                

                                MOV                Touching2 , 1
    PassObsFinish:              
                                RET
PassObs ENDP

ApplyPowerUpLogic PROC FAR

    ;Getting the middle byte of the powerup to detect it's type
                                ADD                TEMPX , BIGPOWERW/2
                                ADD                TEMPY, BIGPOWERH/2
                                CALL               CalculatePowerupVertex
    ;Detecting powerUp type
    ;increment speed powerup
                                CMP                BYTE PTR ES:[DI] ,121
                                JNE                IsDecrementPowerUP

                                CALL               IncreaseCarSpeed
                                JMP                PowerUpLogicFinish
    IsDecrementPowerUP:         
    ;decrement speed powerup
                                CMP                BYTE PTR ES:[DI] ,112
                                JNE                ISPassObsPowerUp
                               
                                CALL               DecreaseCarSpeed
                                JMP                PowerUpLogicFinish
    ISPassObsPowerUp:           
    ;pass obstacle speed powerup
                                CMP                BYTE PTR ES:[DI] ,28
                                JNE                IsCreateObsPowerUp
            
                                CALL               PassObs
                                JMP                PowerUpLogicFinish
    IsCreateObsPowerUp:         
                                CMP                BYTE PTR ES:[DI] ,17
                                JNE                PowerUpLogicFinish
                                
                                CALL               CreateObstacle

    PowerUpLogicFinish:         
                                RET
ApplyPowerUpLogic ENDP

    ;Invoked in Main to check each lap on the timers of cars
CheckSpeedUpTimer PROC FAR
                                CMP                Car1Speed , 2
                                JE                 Car2Timing
    ;Car1Speed is not in the defualt state
    ;--Comparing the current second with the timer
                                CMP                Car1SpeedUPTimer ,  DH
                                JE                 Car2Timing
    ;--If different seconds, update the counter
    ;--Check if  the powerup time has finished
                                MOV                Car1SpeedUPTimer ,DH
                                INC                Car1SpeedUpCounter
                                CMP                Car1SpeedUpCounter , 5
                                JBE                Car2Timing
    ;Resetting car1Speed
                                MOV                Car1Speed , 2
                                MOV                Car1SpeedUpCounter , 0
                                
    Car2Timing:                 
                                CMP                Car2Speed , 2
                                JE                 CheckSpeedFinish
    ;Car1Speed is not in the defualt state
    ;--Comparing the current second with the timer
                                CMP                Car2SpeedUPTimer ,  DH
                                JE                 CheckSpeedFinish

    ;--If different seconds, update the counter
    ;--Check if  the powerup time has finished
                                MOV                Car2SpeedUPTimer ,DH
                                INC                Car2SpeedUpCounter
                                CMP                Car2SpeedUpCounter , 5
                                JNE                CheckSpeedFinish
    ;Resetting car2Speed
                                MOV                Car2Speed , 2
                                MOV                Car2SpeedUpCounter , 0
    CheckSpeedFinish:           
                                RET                                                                                                                                                  ;
CheckSpeedUpTimer ENDP

ClearPowerup PROC FAR
                                PUSH               TEMPX
                                PUSH               TEMPY

                                CALL               ApplyPowerUpLogic

                                POP                TEMPY
                                POP                TEMPX

                                MOV                AX,0A000H
                                MOV                ES,AX
                                MOV                DI ,0
                                MOV                CX , BIGPOWERH
                                CALL               CalculatePowerupVertex
    ROWS_CLEAR_POWER:           
                                PUSH               CX
                                PUSH               DI
                                MOV                CX , BIGPOWERW
    COLS_CLEAR_POWER:           
                                MOV                DL , STATUS_BAR_COLOR
                                MOV                BYTE PTR ES:[DI] , DL
                                INC                DI
                                LOOP               COLS_CLEAR_POWER
                                POP                DI
                                POP                CX
                                ADD                DI , SCREEN_WIDTH
                                LOOP               ROWS_CLEAR_POWER
                                RET
ClearPowerup ENDP

   
    ;description
Delay PROC FAR

    ;Delay
                                MOV                CX , 40000D
    DELAYLOOP:                  
                                XOR                DL , DL
                                LOOP               DELAYLOOP
    ;Delay finished
                                RET
Delay ENDP

InputButtonSwitchCase PROC  FAR
                 
                                cmp                al, 01h
                                jne                bridge
    ;esc logic
                                jmp                exit
                                
    bridge:                     

    ; up arrow
                                cmp                al, UpKeyCode
                                JNE                NotPressed1
                                MOV                UpFlag , 1
    
    ;Sending the keyFlag after changing
                                MOV                SENTVALUE ,al
                                CALL               SEND
                                CALL               Delay
                                JMP                Default
    NotPressed1:                
                                MOV                BL , UpKeyCode
                                ADD                BL, 80H
                                CMP                AL ,  BL
                                JNE                CarCheckLeft
                                MOV                UpFlag , 0
    ;Sending the keyFlag after changing
                                MOV                SENTVALUE ,AL
                                CALL               SEND
                                CALL               Delay
      
                                JMP                Default
    CarCheckLeft:               
    ; left arrow
                                CMP                AL, LeftKeyCode
                                JNE                NotPressed2
                                MOV                LeftFlag , 1
                                
    ;Sending the keyFlag after changing
                                
                                MOV                SENTVALUE ,AL
                                CALL               SEND
                                
                                CALL               Delay
                                JMP                Default
    NotPressed2:                
                                MOV                BL , LeftKeyCode
                                ADD                BL, 80H
                                CMP                AL , BL
                                JNE                CarCheckDown
                                MOV                LeftFlag , 0
    ;Sending the keyFlag after changing
                                
                                MOV                SENTVALUE ,AL
                                CALL               SEND
                                
                                CALL               Delay

                                JMP                Default

    CarCheckDown:               
    ; down arrow
                                cmp                AL, DownKeyCode
                                JNE                NotPressed3
                                MOV                DownFlag , 1
    ;Sending the keyFlag after changing
                                
                                MOV                SENTVALUE ,AL
                                CALL               SEND
                                
                                CALL               Delay


                                JMP                Default
    NotPressed3:                

                                MOV                BL , DownKeyCode
                                ADD                BL, 80H
                                CMP                AL , BL
                                JNE                CarCheckRight
                                MOV                DownFlag , 0

    ;Sending the keyFlag after changing
                                

                                MOV                SENTVALUE ,AL
                                CALL               SEND
                                CALL               Delay
                                JMP                Default
    
    CarCheckRight:              
    ; right arrow
                                CMP                AL , RightKeyCode
                                JNE                NotPressed4
                                MOV                RightFlag , 1

    ;Sending the keyFlag after changing
                              
                                MOV                SENTVALUE ,AL
                                CALL               SEND
                                CALL               Delay
                                
                                JMP                Default
    NotPressed4:                
                                MOV                BL , RightKeyCode
                                ADD                BL, 80H
                                CMP                AL , BL
                                JNE                CheckLetterK
                                MOV                RightFlag , 0

    ;Sending the keyFlag after changing
                              
                                MOV                SENTVALUE ,AL
                                CALL               SEND
                                CALL               Delay

                                JMP                Default

    CheckLetterK:               
                                CMP                AL , DeletePower1Key
                                JNE                NotPressed5
                                MOV                KFlag , 1
                                MOV                powerupParent , 1

    ;Sending the keyFlag after changing
                                MOV                SENTVALUE ,AL
                                CALL               SEND
                                CALL               Delay
                                ClearPower
                                JMP                Default

    NOTPRESSED5:                
        
                                MOV                BL , DeletePower1Key
                                ADD                BL , 80H
                                CMP                AL , BL
                                JNE                CheckLetterF4
                                MOV                KFlag , 0

    ;Sending the keyFlag after changing
                                MOV                SENTVALUE ,AL
                                CALL               SEND
                                
                                CALL               Delay

                                JMP                Default
    
    CheckLetterF4:              
                                CMP                AL , F4KeyCode
                                JNE                CheckLetterF2
                                MOV                F4Flag , 1

    ;Sending the keyFlag after changing
                                MOV                SENTVALUE ,AL
                                CALL               SEND
                                
                                CALL               Delay

                                JMP                DEFAULT

    CheckLetterF2:              
                                CMP                AL , F2KeyCode
                                JNE                CheckLetterEsc
                                MOV                F2Flag , 1

    ;Sending the keyFlag after changing
                                MOV                SENTVALUE ,AL
                                CALL               SEND
                                
                                CALL               Delay

                                JMP                DEFAULT

    CheckLetterEsc:             
                                CMP                AL , EscKeyCode
                                JNE                DEFAULT
                                MOV                EscFlag , 1
                                
    ;Sending the keyFlag after changing
                                MOV                SENTVALUE ,AL
                                CALL               SEND
                                
                                CALL               Delay

    Default:                    
    
                                RET
InputButtonSwitchCase ENDP

ReceivedButtonSwitchCase PROC  FAR
                             
    ;Check that Data Ready
                                mov                dx , 3FDH                                                                                                                         ; Line Status Register
    DATAREADYCHK2:              in                 al , dx
                                AND                al , 1
                                JZ                 EndRecieveButtonSwitchCase

    ;If Ready read the VALUE in Receive data register
                                mov                dx , 03F8H
                                in                 al , dx
                                mov                RECIEVEDVALUE, al

                                cmp                al, 01h
                                jne                bridgeInRecieveSwitchCase
    ;esc logic
                                jmp                exit
    bridgeInRecieveSwitchCase:  

    ; up arrow
                                cmp                al, UpKeyCode
                                JNE                NotPressedRecieved
                                MOV                UpFlag , 1
                                
                                JMP                EndRecieveButtonSwitchCase
    NotPressedRecieved:         
                                MOV                BL , UpKeyCode
                                ADD                BL, 80H
                                CMP                AL ,  BL
                                JNE                CarCheckLeftRecieved
                                MOV                UpFlag , 0
                                JMP                EndRecieveButtonSwitchCase
    CarCheckLeftRecieved:       
    ; left arrow
                                CMP                AL, LeftKeyCode
                                JNE                NotPressed2Recieved
                                MOV                LeftFlag , 1

                                JMP                EndRecieveButtonSwitchCase
    NotPressed2Recieved:        
                                MOV                BL , LeftKeyCode
                                ADD                BL, 80H
                                CMP                AL , BL
                                JNE                CarCheckDownReceived
                                MOV                LeftFlag , 0

                                JMP                EndRecieveButtonSwitchCase

    CarCheckDownReceived:       
    ; down arrow
                                cmp                AL, DownKeyCode
                                JNE                NotPressed3Recieved
                                MOV                DownFlag , 1
 
                                JMP                EndRecieveButtonSwitchCase
    NotPressed3Recieved:        
                                MOV                BL , DownKeyCode
                                ADD                BL, 80H
                                CMP                AL , BL
                                JNE                CarCheckRightRecieved
                                MOV                DownFlag , 0

                                JMP                EndRecieveButtonSwitchCase
    
    CarCheckRightRecieved:      
    ; right arrow
                                CMP                AL , RightKeyCode
                                JNE                NotPressed4Recieved
                                MOV                RightFlag , 1

                                JMP                EndRecieveButtonSwitchCase
    NotPressed4Recieved:        
                                MOV                BL , RightKeyCode
                                ADD                BL, 80H
                                CMP                AL , BL
                                JNE                CheckLetterKReceived
                                MOV                RightFlag , 0

                                JMP                EndRecieveButtonSwitchCase

    CheckLetterKReceived:       
                                CMP                AL , DeletePower1Key
                                JNE                NotPressed5Received
                                MOV                KFlag , 1
                                MOV                powerupParent , 1

                                ClearPower
                                JMP                EndRecieveButtonSwitchCase

    NOTPRESSED5Received:        
                                MOV                BL , DeletePower1Key
                                ADD                BL , 80H
                                CMP                AL , BL
                                JNE                CheckLetterF4Recieved
                                MOV                KFlag , 0
                                
                                JMP                EndRecieveButtonSwitchCase
    
    CheckLetterF4Recieved:      
                                CMP                AL , F4KeyCode
                                JNE                CheckLetterF2Recieved
                                MOV                F4Flag , 1


                                JMP                EndRecieveButtonSwitchCase

    CheckLetterF2Recieved:      
                                CMP                AL , F2KeyCode
                                JNE                CheckLetterEscRecieved
                                MOV                F2Flag , 1

                                JMP                EndRecieveButtonSwitchCase

    CheckLetterEscRecieved:     
                                CMP                AL , EscKeyCode
                                JNE                EndRecieveButtonSwitchCase
                                MOV                EscFlag , 1
    
    EndRecieveButtonSwitchCase: 
    
                                RET
ReceivedButtonSwitchCase ENDP


CheckArrowFlags PROC FAR

    ;------- checking Flags -------
	
                                CMP                ArrowUpFlag , 1
                                JNE                CmpLeft
                          
                                ScanY              PosXfirst, PosYfirst , 1 , 1, Car1Speed
                                CALL               ScanYmovement
                                CALL               UpdateCarPos
                                INC                PosYfirst
    CmpLeft:                    
                                CMP                ArrowLeftFlag , 1
                                JNE                CmpDown
                        
                                ScanX              PosXfirst, PosYfirst , 1 , 0, Car1Speed
                                CALL               ScanXmovement
                                CALL               UpdateCarPos
                                INC                PosXfirst

    CmpDown:                    
                                CMP                ArrowDownFlag , 1
                                JNE                CmpRight
                        
                                ScanY              PosXfirst, PosYfirst , 1 , 0, Car1Speed
                                CALL               ScanYmovement
                                CALL               UpdateCarPos
                                DEC                PosYfirst

    CmpRight:                   
                                CMP                ArrowRightFlag, 1
                                JNE                CmpFinish
                         
                                ScanX              PosXfirst, PosYfirst , 1 ,1, Car1Speed
                                CALL               ScanXmovement
                                CALL               UpdateCarPos
                                DEC                PosXfirst
    CmpFinish:                  
                                RET
CheckArrowFlags ENDP

CheckWASDFlags PROC FAR

    ;------- checking Flags -------
	
                                CMP                WFlag , 1
                                JNE                CmpLeft2

                                ScanY              PosXsecond, PosYsecond , 0 , 1, Car2Speed
                                CALL               ScanYmovement
                                CALL               UpdateCarPos
                                INC                PosYsecond

    CmpLeft2:                   
                                CMP                AFlag , 1
                                JNE                CmpDown2

                                ScanX              PosXsecond, PosYsecond , 0 , 0, Car2Speed
                                CALL               ScanXmovement
                                CALL               UpdateCarPos
                                INC                PosXsecond

    CmpDown2:                   
                                CMP                SFlag , 1
                                JNE                CmpRight2

                                ScanY              PosXsecond, PosYsecond , 0 , 0, Car2Speed
                                CALL               ScanYmovement
                                CALL               UpdateCarPos
                                DEC                PosYsecond

    CmpRight2:                  
                                CMP                DFlag, 1
                                JNE                CmpFinish2

                                ScanX              PosXsecond, PosYsecond , 0 ,1, Car2Speed
                                CALL               ScanXmovement
                                CALL               UpdateCarPos
                                DEC                PosXsecond

    CmpFinish2:                 
                                RET
                
CheckWASDFlags ENDP


    ;Update Flags after each game loop
UpdateArrowFlags PROC FAR
   
                                MOV                BL , UpFlag
                                MOV                ArrowUpFlag, BL

                                MOV                BL , DownFlag
                                MOV                ArrowDownFlag ,  BL

                                MOV                BL , LeftFlag
                                MOV                ArrowLeftFlag, BL

                                MOV                BL , RightFlag
                                MOV                ArrowRightFlag , BL

                                MOV                BL , KFlag
                                MOV                LetterKFlag , BL

                                MOV                BL , MFlag
                                MOV                LetterMFlag , BL

                                MOV                BL , F4Flag
                                MOV                LetterF4Flag , BL

                                MOV                BL , F2Flag
                                MOV                LetterF2Flag , BL

                                MOV                BL , EscFlag
                                MOV                LetterEscFlag , BL

                                RET

UpdateArrowFlags ENDP

    ;description
UpdateWASDFlags PROC FAR
                                MOV                BL , UpFlag
                                MOV                WFlag, BL

                                MOV                BL , DownFlag
                                MOV                SFlag ,  BL

                                MOV                BL , LeftFlag
                                MOV                AFlag, BL

                                MOV                BL , RightFlag
                                MOV                DFlag , BL

                                MOV                BL , KFlag
                                MOV                LetterKFlag , BL

                                MOV                BL , MFlag
                                MOV                LetterMFlag , BL

                                RET
UpdateWASDFlags ENDP

    ;description

    ;procedure calls all arrow keys functions
CheckArrowKeys PROC FAR
                                SETKEYS            ArrowUp, ArrowDown, ArrowLeft, ArrowRight , LetterK , LetterM, LetterF4, LetterF2, LetterEsc
                                SetFlags           ArrowUpFlag, ArrowDownFlag, ArrowLeftFlag, ArrowRightFlag, LetterKFlag, LetterMFlag, LetterF4Flag, LetterF2Flag, LetterEscFlag
                                CALL               InputButtonSwitchCase
                                CALL               UpdateArrowFlags
                                RET
CheckArrowKeys ENDP

CheckWASDKeys PROC FAR
    ; SETKEYS            WKey, SKey, AKey, DKey , LetterK , LetterM, LetterF4, LetterF2, LetterEsc
                                SETKEYS            ArrowUp, ArrowDown, ArrowLeft, ArrowRight , LetterK , LetterM, LetterF4, LetterF2, LetterEsc
                                SetFlags           WFlag, SFlag, AFlag, DFlag , LetterKFlag, LetterMFlag, LetterF4Flag,LetterF2Flag, LetterEscFlag
                                CALL               InputButtonSwitchCase
                                CALL               UpdateWASDFlags
                                RET
CheckWASDKeys ENDP


    ;procedure calls all WASD keys functions
RecieveWASDKeys PROC FAR
                                SETKEYS            ArrowUp, ArrowDown, ArrowLeft, ArrowRight , LetterK , LetterM, LetterF4, LetterF2, LetterEsc
                                SetFlags           WFlag, SFlag, AFlag, DFlag , LetterKFlag, LetterMFlag, LetterF4Flag,LetterF2Flag, LetterEscFlag
                                CALL               ReceivedButtonSwitchCase
                                CALL               UpdateWASDFlags
                                RET
RecieveWASDKeys ENDP


RecieveArrowKeys PROC FAR
    ; SETKEYS            WKey, SKey, AKey, DKey , LetterK , LetterM, LetterF4, LetterF2, LetterEsc
                                SETKEYS            ArrowUp, ArrowDown, ArrowLeft, ArrowRight , LetterK , LetterM, LetterF4, LetterF2, LetterEsc
                                SetFlags           ArrowUpFlag, ArrowDownFlag, ArrowLeftFlag, ArrowRightFlag, LetterKFlag, LetterMFlag, LetterF4Flag, LetterF2Flag, LetterEscFlag
                                
                                CALL               ReceivedButtonSwitchCase
                                CALL               UpdateArrowFlags
                                RET
RecieveArrowKeys ENDP




Update1 PROC FAR
                                CLEAR              CarImg1, CAR_SIZE, PrevPosXfirst, PrevPosYfirst
                                Draw_Car           CarImg1, CAR_SIZE, Posxfirst , PosYfirst, 1
    CannotDraw:                 
                                RET
Update1 ENDP


Update2 PROC FAR
                                CLEAR              CarImg2, CAR_SIZE, PrevPosXsecond, PrevPosYsecond
                                Draw_Car           CarImg2, CAR_SIZE, PosXsecond , PosYsecond, 2
                                RET
Update2 ENDP

    ;Before Calling, Set the carToScan with the car you want to scan
UpdateCarPos PROC FAR
    ;Checking that the car that it is scanning
                                CMP                CarToScan , 0
                                JE                 Car2
    ;Changing car1 position to the previous position
                                MOV                DX , CarToDrawY
                                MOV                PosYfirst , DX

                                MOV                DX , CarToDrawX
                                MOV                PosXfirst , DX
                                RET
                
    ;Changing car2 position to the previous position
    Car2:                       
                                MOV                DX , CarToDrawY
                                MOV                PosYsecond , DX

                                MOV                DX , CarToDrawX
                                MOV                PosXsecond , DX
    ;No matching found, continue looping
                                RET
UpdateCarPos ENDP

    ;description
    ; PassObsLogic1 PROC FAR
                             
    ;                                 CALL               GetTopLeftObstacle
    ;                                 MOV                DX , TopleftObstX                                                                       ;(DH->X , DL->Y)
    
    ;     ;--Getting xright corner of the obst in AH
    ;     ;--DH Already contains xleft of the obst
    ;                                 ADD                DX , OBSTACLEW-1
                                
    ;     ;ObstacleRight >=CarLeft
                                                                                                       
    ;                                 CMP                DX , CarToDrawX
    ;                                 JB                 GotOutOfObstacle
                               
    ;                                 MOV                AX , CarToDrawX
    ;                                 ADD                AX , CAR_SIZE-1
    ;     ;CarRight >= ObstacleLeft
    ;                                 CMP                AX , TopleftObstX
    ;                                 JB                 GotOutOfObstacle

    ;                                 MOV                DX , TopleftObstY
    ;                                 ADD                DX , OBSTACLEH-1
    ;     ;ObstacleDown >= CarUp
    ;                                 CMP                DX , CarToDrawY
    ;                                 JB                 GotOutOfObstacle

    ;                                 MOV                AX , CarToDrawY
    ;                                 ADD                AX , CAR_SIZE-1
    ;     ;CarDown >= ObstacleUp
    ;                                 CMP                AX , TopleftObstY
    ;                                 JB                 GotOutOfObstacle

    ;                                 JMP                PassObsLogicFinish1

    ;     GotOutOfObstacle:
    ;                                 MOV                Touching1 , 0
    ;                                 mov                InObstacle1 , 0
    ;     PassObsLogicFinish1:
                                
    ;                                 RET
    ; PassObsLogic1 ENDP

    ;description
ScanYmovement PROC FAR
    
                                MOV                AX , 0A000H
                                MOV                ES , AX
                
                                MOV                DI , 0
                                MOV                verticalFlag ,1

    ;Assume no addition or subtraction has occured to the positions in "checkFlags"

                                CMP                YMovement , 1                                                                                                                     ; The car is moving up either car1 or car2
                                JE                 UpMovement

                                ADD                CarToDrawY , CAR_SIZE
                                CALL               CalculateBoxVertex
                                SUB                CarToDrawY , CAR_SIZE-1

                                JMP                StartScanning
    UpMovement:                 
                                DEC                CarToDrawY
                                CALL               CalculateBoxVertex
    StartScanning:              
                                MOV                CX , CurrentSpeed                                                                                                                 ;# of rows to be checked

    ;Outer Loop Starts
    NextRow:                    
                                PUSH               CX
                                PUSH               DI
                                MOV                CX , CAR_SIZE
                                MOV                ObstacleCollisionCount , 0
    ;Inner loop starts
    CheckY:                     
    ; CMP BYTE PTR ES:[DI] , 142
    ; JNE NoObstacleDetected
                                CMP                BYTE PTR ES:[DI] , 16
                                JE                 ObstacleDetected
                                CMP                BYTE PTR ES:[DI] , 28
                                JE                 ObstacleDetected

                                CMP                BYTE PTR ES:[DI], 19                                                                                                              ; THIS IS TO CHECK FOR CHECKLINES
                                JE                 CHECKLINEDETECTED
                                CMP                BYTE PTR ES:[DI], 36
                                JE                 POWERUPDETECTED
                                CMP                BYTE PTR ES:[DI] , 20                                                                                                             ; 20 is the GREY color degree of the road
                                JE                 NoObstacleDetected
                                CMP                BYTE PTR ES:[DI] , 31                                                                                                             ; 31 is the WHITE color degree of the road
                                JE                 NoObstacleDetected
                                CMP                BYTE PTR ES:[DI] , 40                                                                                                             ; 40 is one of the color degrees for the end line
                                JE                 NoObstacleDetected

                                JMP                NormalObstacle

    ObstacleDetected:           
                                INC                ObstacleCollisionCount
                                cmp                CarToScan , 1
                                JNE                IsTouching2

                                CMP                Touching1 , 1
                                JNE                NormalObstacle

                                MOV                InObstacle1,1
                                JMP                NoObstacleDetected

    IsTouching2:                
                                CMP                Touching2 , 1
                                JNE                NormalObstacle
                                MOV                InObstacle2 ,1
                                JMP                NoObstacleDetected

    ; CALL               PassObsLogic2
    NormalObstacle:             

                                POP                DI
                                POP                CX
                                RET
    CHECKLINEDETECTED:          
                                PUSH               CX
                                PUSH               DI
                                MOV                ISVERTICALCHECKLINE, 0
                                CALL               GETCHECKLINEVERTIX
                                CALL               UPDATESCORE
                                POP                DI
                                POP                CX
                                JMP                NoObstacleDetected
    POWERUPDETECTED:            
                                PUSH               CX
                                PUSH               DI
                                CALL               GetTopLeftPower
                                
                                MOV                BX,POWERTOPLEFTBYTE
                                INC                BX
                                ADD                BX , SCREEN_WIDTH
                                CMP                BYTE PTR ES:[BX] , 121                                                                                                            ; 121 is the color degree of the increasing powerup
                                JE                 INCPOWERUP_DETECTED
                                CMP                BYTE PTR ES:[BX] , 112                                                                                                            ; 112 is the color degree of the decreasing powerup
                                JE                 DECPOWERUP_DETECTED
                                CMP                BYTE PTR ES:[BX] , 17
                                JE                 CREATEOBSTPOWERUP_DETECTED
                                CMP                BYTE PTR ES:[BX] , 28
                                JE                 PASSOBSTPOWER_DETECTED

    INCPOWERUP_DETECTED:        
                                MOV                AL , 1
                                MOV                powerupType , AL
                                JMP                DRAWING_COLLECTED_POWERUP
    DECPOWERUP_DETECTED:        
                                MOV                AL , 2
                                MOV                powerupType , AL
                                JMP                DRAWING_COLLECTED_POWERUP
    CREATEOBSTPOWERUP_DETECTED: 
                                MOV                AL , 3
                                MOV                powerupType , AL
                                JMP                DRAWING_COLLECTED_POWERUP

    PASSOBSTPOWER_DETECTED:     
                                MOV                AL , 4
                                MOV                powerupType , AL

    DRAWING_COLLECTED_POWERUP:  
                                CMP                CarToScan , 0                                                                                                                     ;Car1 is scanning
                                JE                 Car2Powerup2
    ;Powerup for first player is collected

                                MOV                AX , powerup1Posx
                                MOV                TEMPX , AX

                                MOV                AX , powerup1Posy
                                MOV                TEMPY , AX

                                MOV                AL , CarToScan
                                MOV                powerupParent , AL

                                MOV                TMP4 , 0

                                DrawPower          TEMPX,TEMPY,powerupType
                                JMP                COLLECTPOWER
    Car2Powerup:                
    ;Powerup for second player is collected

                                MOV                AX , powerup2Posx
                                MOV                TEMPX , AX

                                MOV                AX , powerup2Posy
                                MOV                TEMPY , AX

                                MOV                AL , CarToScan
                                MOV                powerupParent , AL

                                MOV                TMP4 , 0

                                DrawPower          TEMPX,TEMPY, powerupType


    COLLECTPOWER:               
                                CALL               SEARCHTORETRIEVE
                                POP                DI
                                POP                CX
    NoObstacleDetected:         
                               
                                INC                DI
                                DEC                CX
                                CMP                CX , 0
                                JNE                CheckY
                                
                                CALL               TurnOffPassingObst

                                POP                DI
                                POP                CX
    ;Incrementing DI & Y position of the car after each row is scanned

                                CMP                YMovement , 1
                                JE                 UpMovement2
                                ADD                DI , SCREEN_WIDTH
                                INC                CarToDrawY
                                JMP                NextLoop
    UpMovement2:                
                                SUB                DI , SCREEN_WIDTH
                                DEC                CarToDrawY
    NextLoop:                   
                                DEC                CX
                                CMP                CX , 0
                                JNE                NextRow

    checkYFinish:               
                                MOV                verticalFlag,0
                                RET
ScanYmovement ENDP

ScanXmovement PROC FAR
                                MOV                AX , 0A000H
                                MOV                ES, AX

                                MOV                DI , 0
                                MOV                horizontalFlag ,1

                                CMP                XMovement , 1                                                                                                                     ; The car is moving right either car1 or car2
                                JNE                LeftMovement
    ;Moving right
                                ADD                CarToDrawX , CAR_SIZE
                                CALL               CalculateBoxVertex
                                SUB                CarToDrawX , CAR_SIZE-1
                                JMP                StartScanning2
    ;Moving left
    LeftMovement:               
                                DEC                CarToDrawX
                                CALL               CalculateBoxVertex
    StartScanning2:             
                                MOV                CX , CurrentSpeed
    
    NextRow2:                   
                                PUSH               CX
                                PUSH               DI
                                MOV                CX, CAR_SIZE
                                MOV                ObstacleCollisionCount , 0
    CheckX:                     
    ;Checking for obstacle
                                CMP                BYTE PTR ES:[DI] , 16
                                JE                 ObstacleDetected2
                                CMP                BYTE PTR ES:[DI] , 28
                                JE                 ObstacleDetected2
    ;Non obstacle checks
                                CMP                BYTE PTR ES:[DI], 19                                                                                                              ; THIS IS TO CHECK FOR CHECKLINES
                                JE                 CHECKLINEDETECTED2
                                CMP                BYTE PTR ES:[DI], 36
                                JE                 POWERUPDETECTED2
                                CMP                BYTE PTR ES:[DI] , 20                                                                                                             ; 20 is the GREY color degree of the road
                                JE                 NoObstacleDetected2
                                CMP                BYTE PTR ES:[DI] , 31                                                                                                             ; 31 is the WHITE color degree of the road
                                JE                 NoObstacleDetected2
                                CMP                BYTE PTR ES:[DI] , 40                                                                                                             ; 40 is one of the color degrees for the end line
                                JE                 NoObstacleDetected2
                          
                                JMP                NormalObstacle2
    ObstacleDetected2:          
                                INC                ObstacleCollisionCount
                                cmp                CarToScan , 1
                                JNE                IsTouching22

                                CMP                Touching1 , 1
                                JNE                NormalObstacle2

                                MOV                InObstacle1,1
                                JMP                NoObstacleDetected2

    IsTouching22:               
                                CMP                Touching2 , 1
                                JNE                NormalObstacle2
                                MOV                InObstacle2 ,1
                                JMP                NoObstacleDetected2

    NormalObstacle2:            

                                POP                DI
                                POP                cx
                                RET

    CHECKLINEDETECTED2:         
                                PUSH               CX
                                PUSH               DI
                                MOV                ISVERTICALCHECKLINE, 1
                                CALL               GETCHECKLINEVERTIX
                                CALL               UPDATESCORE
                                POP                DI
                                POP                CX
                                JMP                NoObstacleDetected2
    POWERUPDETECTED2:           
                                PUSH               CX
                                PUSH               DI
                                CALL               GetTopLeftPower
                
                                MOV                BX,POWERTOPLEFTBYTE
                                INC                BX
                                ADD                BX , SCREEN_WIDTH
                                CMP                BYTE PTR ES:[BX] , 121                                                                                                            ; 121 is the color degree of the increasing powerup
                                JE                 INCPOWERUP_DETECTED2
                                CMP                BYTE PTR ES:[BX] , 112                                                                                                            ; 112 is the color degree of the decreasing powerup
                                JE                 DECPOWERUP_DETECTED2
                                CMP                BYTE PTR ES:[BX] , 17
                                JE                 CREATEOBSTPOWERUP_DETECTED2
                                CMP                BYTE PTR ES:[BX] , 28
                                JE                 PASSOBSTPOWER_DETECTED2

    INCPOWERUP_DETECTED2:       
                                MOV                AL , 1
                                MOV                powerupType , AL
                                JMP                DRAWING_COLLECTED_POWERUP2
    DECPOWERUP_DETECTED2:       
                                MOV                AL , 2
                                MOV                powerupType , AL
                                JMP                DRAWING_COLLECTED_POWERUP2
    CREATEOBSTPOWERUP_DETECTED2:
                                MOV                AL , 3
                                MOV                powerupType , AL
                                JMP                DRAWING_COLLECTED_POWERUP2

    PASSOBSTPOWER_DETECTED2:    
                                MOV                AL , 4
                                MOV                powerupType , AL

    DRAWING_COLLECTED_POWERUP2: 
                                CMP                CarToScan , 0                                                                                                                     ;Car1 is scanning
                                JE                 Car2Powerup2
    ;Powerup for first player is collected

                                MOV                AX , powerup1Posx
                                MOV                TEMPX , AX

                                MOV                AX , powerup1Posy
                                MOV                TEMPY , AX

                                MOV                AL , CarToScan
                                MOV                powerupParent , AL

                                MOV                TMP4 , 0

                                DrawPower          TEMPX,TEMPY,powerupType
                                JMP                COLLECTPOWER2
    Car2Powerup2:               
    ;Powerup for second player is collected

                                MOV                AX , powerup2Posx
                                MOV                TEMPX , AX

                                MOV                AX , powerup2Posy
                                MOV                TEMPY , AX

                                MOV                AL , CarToScan
                                MOV                powerupParent , AL

                                MOV                TMP4 , 0

                                DrawPower          TEMPX,TEMPY, powerupType


    COLLECTPOWER2:              
                                CALL               SEARCHTORETRIEVE
                                POP                DI
                                POP                CX
    NoObstacleDetected2:        
                                ADD                DI , SCREEN_WIDTH
                                DEC                CX
                                CMP                CX , 0
                                JNE                CheckX

                                CALL               TurnOffPassingObst

                                POP                DI
                                POP                CX

                                CMP                XMovement , 1
                                JNE                LeftMovement2

                                INC                DI
                                INC                CarToDrawX
                                JMP                NextLoop2
    LeftMovement2:              
                                DEC                DI
                                DEC                CarToDrawX

    NextLoop2:                  
                                DEC                CX
                                CMP                CX , 0
                                JNE                NextRow2
    checkXFinish:               
                                MOV                horizontalFlag ,0
                                RET
ScanXmovement ENDP

    ;Cars checking out of the obstacle
TurnOffPassingObst PROC FAR
                                 
                                CMP                CarToScan , 1
                                JNE                IsCar2Touched
                               
                                CMP                InObstacle1 , 1
                                JNE                TouchingInactive2

                                CMP                ObstacleCollisionCount , 0
                                JNE                TouchingInactive2

                                MOV                InObstacle1 , 0
                                MOV                Touching1 , 0

                                JMP                TouchingInactive2

    IsCar2Touched:              
                                CMP                InObstacle2 , 1
                                JNE                TouchingInactive2

                                CMP                ObstacleCollisionCount , 0
                                JNE                TouchingInactive2

                                MOV                InObstacle2 , 0
                                MOV                Touching2 , 0

    TouchingInactive2:          
                                RET
   
TurnOffPassingObst ENDP

    ;description
checkingPositionChange1 PROC FAR
             
                                MOV                DX , PosXfirst
                                CMP                PrevPosXfirst, DX

                                JE                 bridge1
                                CALL               Update1
                                JMP                Car2Check
    bridge1:                    
                                MOV                DX , PosYfirst
                                CMP                PrevPosYfirst , DX
                                JE                 Car2Check
                                CALL               Update1
    Car2Check:                  
                                RET
checkingPositionChange1 ENDP

    ;description
checkingPositionChange2 PROC FAR
                                MOV                DX , PosXsecond
                                CMP                PrevPosXsecond, DX
                                JE                 bridge2
                                CALL               Update2
                                JMP                ContinueLooping
    bridge2:                    
                                MOV                DX , PosYsecond
                                CMP                PrevPosYsecond , DX
                                JE                 ContinueLooping
                                CALL               Update2

    ContinueLooping:            
                                RET
checkingPositionChange2 ENDP

INT09H PROC FAR

                                IN                 AL, 60H

                                CMP                PLAYERNUMBER , 1
                                JNE                Player2
                                CALL               CheckArrowKeys
                                JMP                InterruptKilling

    Player2:                    
                                CALL               CheckWASDKeys
    ;Not taking car2 input from the keyboard anymore
  
    InterruptKilling:           
                                MOV                AL , 20H
                                OUT                20H, AL

                                IRET
INT09H ENDP







    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;INTERFACE PROCEDURES;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INTERFACEBACKGROUND PROC
                                MOV                TEMPX, 0
                                MOV                TEMPY, 0
                                MOV                DI, TEMPY
                                MOV                AX, SCREENWIDTH
                                MUL                DI
                                MOV                DI, AX
                                ADD                DI, TEMPX
    
                                MOV                CX, 200
    INTERFACEOUTERLOOP:         
                                PUSH               CX
                                MOV                CX, 320
    INTERFACEINNERLOOP:         
                                MOV                BYTE PTR ES:[DI], 71H
                                INC                DI
                                LOOP               INTERFACEINNERLOOP
                                MOV                TEMPX, 0
                                ADD                TEMPY, BACKGROUNDIMAGEPARTH
                                POP                CX
                                LOOP               INTERFACEOUTERLOOP

                                MOV                TEMPX, 80
                                MOV                TEMPY, 20
                                MOV                TMP, 0
                                DRAW               LOGOIMG, LOGOIMGW, LOGOIMGH, TEMPX, TEMPY, TMP
                                RET
INTERFACEBACKGROUND ENDP


ENTERPLAYERNAME PROC
                                MOV                CX, 14
    FIRSTCHARLOOP:              
                                MOV                AH, 0
                                INT                16H
                                CMP                AL, 'A'
                                JB                 FIRSTCHARLOOP
                                CMP                AL, 'Z'
                                JBE                RESTOFCHARS

                                CMP                AL, 'a'
                                JB                 FIRSTCHARLOOP
                                CMP                AL, 'z'
                                JBE                RESTOFCHARS

                                JMP                FIRSTCHARLOOP

    RESTOFCHARS:                
                                MOV                DL, AL
                                MOV                AH, 2
                                INT                21H

    RESTOFCHARSLOOP:            
                                CMP                AL, 8
                                JE                 DONTSTORECHAR
                                MOV                BYTE PTR DS:[SI], AL
                                INC                SI
    DONTSTORECHAR:              
                                MOV                AH, 0
                                INT                16H
                                CMP                AH, 28
                                JE                 FINISHENTERNAME
                                CMP                AH, 14
                                JNE                NOTBACKSPACE
                                INC                CX
                                INC                CX
                                DEC                SI
    NOTBACKSPACE:               
                                MOV                DL, AL
                                MOV                AH, 2
                                INT                21H
                                LOOP               RESTOFCHARSLOOP
    FINISHENTERNAME:            
                                RET
ENTERPLAYERNAME ENDP



INTERFACESTAGE PROC
                                CALL               INTERFACEBACKGROUND


    ;DRAWING LOGO AND INPUT TEXTS AND NOTE
                                MOV                TEMPX, 5
                                MOV                TEMPY, 80
                                MOV                TMP, 0
                                DRAW               INPUTIMG, INPUTIMGW, INPUTIMGH, TEMPX, TEMPY, TMP

    ;FIRST NOTE
                                MOV                AH, 2H
                                MOV                DL, 0
                                MOV                DH, 17
                                MOV                BH, 0
                                INT                10H
                                MOV                AH, 9
                                MOV                DX, OFFSET NOTE1
                                INT                21H

    ;SECOND NOTE
                                MOV                AH, 2H
                                MOV                DL, 0
                                MOV                DH, 19
                                MOV                BH, 0
                                INT                10H
                                MOV                AH, 9
                                MOV                DX, OFFSET NOTE2
                                INT                21H



    ;X = 47 Y = 16

    ;SETTING CURSOR FOR FIRST NAME
                                MOV                AH, 2H
                                MOV                DL, 16
                                MOV                DH, 36
                                MOV                BH, 0
                                INT                10H
                                 
    ;SENDING NAMES STAGE
                                CMP                PLAYERNUMBER, 1
                                JNE                ENTERSECONDPLAYERNAME
                                MOV                SI, OFFSET FIRSTNAME
                                CALL               ENTERPLAYERNAME
                                MOV                SI, OFFSET FIRSTNAME
                                MOV                SENTSTRINGOFFSET, SI
                                CALL               SENDSTRING
                                JMP                RECIEVENAMES
    ENTERSECONDPLAYERNAME:      
                                MOV                SI, OFFSET SECONDNAME
                                CALL               ENTERPLAYERNAME
                                MOV                SI, OFFSET SECONDNAME
                                MOV                SENTSTRINGOFFSET, SI
                                CALL               SENDSTRING
                                 
    RECIEVENAMES:               
                                CMP                PLAYERNUMBER, 1
                                JNE                SECONDPLAYERRECIEVING
                                MOV                SI, OFFSET SECONDNAME
                                MOV                RECIEVEDSTRINGOFFSET, SI
                                CALL               RECIEVESTRING
                                JMP                FINISHINTERFACESTAGE
    SECONDPLAYERRECIEVING:      
                                MOV                SI, OFFSET FIRSTNAME
                                MOV                RECIEVEDSTRINGOFFSET, SI
                                CALL               RECIEVESTRING

    FINISHINTERFACESTAGE:       
                                RET
INTERFACESTAGE ENDP

    ;description
MAINMENU PROC

                                CALL               INTERFACEBACKGROUND

    ;FIRST INSTRUCTION
                                MOV                AH, 2H
                                MOV                DL, 2
                                MOV                DH, 15
                                MOV                BH, 0
                                INT                10H
                                MOV                AH, 9
                                MOV                DX, OFFSET INSTRUCTION1
                                INT                21H

    ;SECOND INSTRUCTION
                                MOV                AH, 2H
                                MOV                DL, 2
                                MOV                DH, 17
                                MOV                BH, 0
                                INT                10H
                                MOV                AH, 9
                                MOV                DX, OFFSET INSTRUCTION2
                                INT                21H
                                RET
MAINMENU ENDP








    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;     Road procedures      ;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


    ;PROC TO DRAW AN IMAGE
DRAWIMAGE PROC FAR
                                PUSH               CX
    ;VIDEO MEMORY
                                MOV                AX, 0A000H
                                MOV                ES, AX

                                MOV                DI, STARYTODRAW
                                MOV                AX, SCREENWIDTH
                                MUL                DI
                                MOV                DI, AX
                                ADD                DI, STARXTODRAW
    
                                MOV                CX, HEITODRAW
                                MOV                SI, IMGTODRAW

    ROWS:                       
                                PUSH               CX
                                PUSH               DI
                                MOV                CX, WIDTODRAW
    COLS:                       
                                MOV                DL, BYTE PTR [SI]
                                CMP                DL, 0
                                JE                 DONTDRAWBYTE
                                MOV                ES:[DI], DL
    DONTDRAWBYTE:               
                                INC                SI
                                INC                DI
                                LOOP               COLS
                                POP                DI
                                POP                CX
                                ADD                DI, SCREENWIDTH
                                LOOP               ROWS
                                MOV                DI, STARYTODRAW
                                MOV                AX, SCREENWIDTH
                                MUL                DI
                                MOV                DI, AX
                                ADD                DI, STARXTODRAW
                                ADD                DI, WIDTODRAW
                                POP                CX
                                RET
DRAWIMAGE ENDP


    ;Called inside macro "SetVerticalLine"
DrawVerticlLine PROC FAR
                                CALL               CalculateBoxVertex
                                MOV                CX , LineToDrawH
    LineHeightLoop:             
                                MOV                DX , DrawingColor
                                MOV                BYTE PTR ES:[DI] , DL
                                ADD                DI , SCREEN_WIDTH
                                LOOP               LineHeightLoop
                                RET
DrawVerticlLine ENDP

    ;Called inside macro "SetHorizontalLine"
DrawHorizontalLine PROC FAR
                                CALL               CalculateBoxVertex
                                MOV                CX , LineToDrawW
    LineWidthLoop:              
                                MOV                DX , DrawingColor
                                MOV                BYTE PTR ES:[DI] , DL
                                INC                DI
                                LOOP               LineWidthLoop

                                RET
DrawHorizontalLine ENDP
    ;Uses stored variables to draw status Bar
DrawStatBar PROC FAR
 
    ;Setting starting posititons of the status bar to carToDraw varialbes as it's used in 'CalculateBoxVertix' proc
                                MOV                DX , StatusBarStartX
                                MOV                CarToDrawX , DX

                                MOV                DX , StatusBarStartY
                                MOV                CarToDrawY , DX

                                CALL               CalculateBoxVertex
                            
    ; Setting CX by the remaining number of bytes in the screen
                                MOV                AX , StatusBarTotalheight
                                MOV                BX , SCREEN_WIDTH
                                MUL                BX
                                MOV                CX , AX
    ;Drawing status Bar background
    DrawStatusBg:               
                                MOV                BYTE PTR ES:[DI], STATUS_BAR_COLOR
                                INC                DI
                                LOOP               DrawStatusBg
    
    ;Drawing horizontal line to leave space to powerups

    ;-- Calculate Ypos of the line:
                                MOV                AX , StatusBarTotalheight
                                MOV                BX , 2D
                                DIV                BX
                                ADD                AX , StatusBarStartY
    ;--Drawing Lines
                                SetHorizontalLine  0, AX, SCREEN_WIDTH, STATUS_BAR_COLOR2
                                SetVerticalLine    SCREEN_WIDTH/2, StatusBarStartY, StatusBarTotalheight, STATUS_BAR_COLOR2
    
    ;Writing User names to be passed from interface
                            

    ;printing  FirstName
                                MOV                SI , OFFSET FirstName
                                MOV                DL , 4
                                MOV                DH , 22
                                CALL               PrintStringWithColor
    ;printing  SecondName
                                MOV                SI , OFFSET SecondName
                                MOV                DL , 25
                                MOV                DH , 22
                                CALL               PrintStringWithColor

                                RET
DrawStatBar ENDP

    ;Set the Offset of the string you want to print in SI before calling
PrintStringWithColor PROC FAR
    printOneByOne:              
    ;--Setting Cursor position
                                MOV                AH , 2
                                MOV                BH, 0
                                INT                10H
    ;--Start printing
                                MOV                AL , [SI]
                                CMP                AL , '$'
                                JE                 PrintFinish
                                CALL               char_display
                                INC                SI
                                INC                DL
                                JMP                printOneByOne
    PrintFinish:                
                                RET
PrintStringWithColor ENDP


    ;PROC TO RANDOMIZE

GETSYSTEMTIME PROC FAR
                                MOV                CX, 0
                                MOV                DX, 59000                                                                                                                         ;63997
                                MOV                AH, 86H
                                INT                15H
                                MOV                AH, 2CH                                                                                                                           ; INTERRUPT to get system time
                                INT                21H
                                RET
GETSYSTEMTIME ENDP


GETSYSTEMTIME2 PROC FAR
                                MOV                CX, 0
                                MOV                DX, 53000                                                                                                                         ;63997
                                MOV                AH, 86H
                                INT                15H
                                MOV                AH, 2CH                                                                                                                           ; INTERRUPT to get system time
                                INT                21H
                                RET
GETSYSTEMTIME2 ENDP

RANDOMIZEPERCENTAGE PROC
                                CALL               GETSYSTEMTIME2
                                MOV                AL, 100
                                MOV                RANGEOFRAND, AL
                                CALL               RANGINGRAND                                                                                                                       ;DL NOW HAS A NUMBER FROM 0 TO 99
                                RET
RANDOMIZEPERCENTAGE ENDP


    ;PROC TO GET THE POSIBLE POINTS AFTER DRAWING UP
POINTSAFTERUP PROC
                                CALL               CALCXY                                                                                                                            ; AS WE NEED IT IN THE LEFT DIR

                                MOV                UPDIR, DI
                                CMP                UPDIR, VERROADIMGH*SCREENWIDTH + VERROADIMGW                                                                                      ;CHECKING FOR OVERFLOWING THE SCREEN
                                JA                 FIRSTUP
                                MOV                UPDIR, 0
                                JMP                NOTFIRSTUP
    FIRSTUP:                    
                                SUB                UPDIR, VERROADIMGH*SCREENWIDTH + VERROADIMGW
    NOTFIRSTUP:                 

                                MOV                RIGHTDIR, DI
                                SUB                RIGHTDIR, HORROADIMGH*SCREENWIDTH + VERROADIMGW
                                MOV                DOWNDIR, 0
    
                                CMP                TEMPX, HORROADIMGW
                                JA                 FIRSTLEFT
                                MOV                LEFTDIR, 0
                                JMP                NOTFIRSTLEFT
    FIRSTLEFT:                  
                                MOV                LEFTDIR, DI
                                SUB                LEFTDIR, HORROADIMGH*SCREENWIDTH + HORROADIMGW
    NOTFIRSTLEFT:               
                                RET
POINTSAFTERUP ENDP

    ;PROC TO GET THE POSIBLE POINTS AFTER DRAWING RIGHT
POINTSAFTERRIGHT PROC
                                MOV                UPDIR, DI
                                CMP                UPDIR, (VERROADIMGH-HORROADIMGH)*SCREENWIDTH
                                JA                 SECONDUP
                                MOV                UPDIR, 0
                                JMP                NOTSECONDUP
    SECONDUP:                   
                                SUB                UPDIR, (VERROADIMGH-HORROADIMGH)*SCREENWIDTH                                                                                      ;VERROADIMGH-HORROADIMGH = 30
    NOTSECONDUP:                

                                MOV                RIGHTDIR, DI
                                MOV                DOWNDIR, DI
                                MOV                LEFTDIR, 0
                                RET
POINTSAFTERRIGHT ENDP

    ;PROC TO GET THE POSIBLE POINTS AFTER DRAWING DOWN
POINTSAFTERDOWN PROC
                                CALL               CALCXY
                                MOV                UPDIR, 0
                                MOV                RIGHTDIR, DI
                                SUB                RIGHTDIR, VERROADIMGW
                                ADD                RIGHTDIR, VERROADIMGH * SCREENWIDTH
                                MOV                DOWNDIR, DI
                                SUB                DOWNDIR, VERROADIMGW
                                ADD                DOWNDIR, VERROADIMGH * SCREENWIDTH

                                CMP                TEMPX, HORROADIMGW
                                JA                 THIRDLEFT
                                MOV                LEFTDIR, 0
                                JMP                NOTTHIRDLEFT
    THIRDLEFT:                  
                                MOV                LEFTDIR, DI
                                SUB                LEFTDIR, HORROADIMGW
                                ADD                LEFTDIR, VERROADIMGH * SCREENWIDTH
    NOTTHIRDLEFT:               
                                RET
POINTSAFTERDOWN ENDP

    ;PROC TO GET THE POSIBLE POINTS AFTER DRAWING LEFT
POINTSAFTERLEFT PROC
                                CALL               CALCXY
                                MOV                UPDIR, DI
                                CMP                UPDIR, HORROADIMGW + VERROADIMGW + (VERROADIMGH - HORROADIMGH) * SCREENWIDTH
                                JA                 FOURTHUP
                                MOV                UPDIR, 0
                                JMP                NOTFOURTHUP
    FOURTHUP:                   
                                SUB                UPDIR, HORROADIMGW + VERROADIMGW + (VERROADIMGH - HORROADIMGH) * SCREENWIDTH
    NOTFOURTHUP:                
                                MOV                RIGHTDIR, 0
                                MOV                DOWNDIR, DI
                                SUB                DOWNDIR, HORROADIMGW + VERROADIMGW

                                CMP                TEMPX, 2 * HORROADIMGW
                                JA                 FOURTHLEFT
                                MOV                LEFTDIR, 0
                                JMP                NOTFOURTHLEFT
    FOURTHLEFT:                 
                                MOV                LEFTDIR, DI
                                SUB                LEFTDIR, 2 * HORROADIMGW
    NOTFOURTHLEFT:              
                                RET
POINTSAFTERLEFT ENDP



    ;PROCEDURE TO CALCULATE X AND Y FROM THE LOCATION OF THE BYTE
CALCXY PROC
                                MOV                AX, DI
                                MOV                DX, 0
                                MOV                BX, SCREENWIDTH
                                DIV                BX
                                MOV                TEMPX, DX

                                MOV                TEMPY, AX
                                RET
CALCXY ENDP

GETTOPLEFTPOWER PROC
    GOLEFTBYTE:                 
                                MOV                BX, DI
                                DEC                BX
                                CMP                BYTE PTR ES:[BX], 36
                                JE                 STILLLEFT
                                CMP                BYTE PTR ES:[BX], 112
                                JE                 STILLLEFT
                                CMP                BYTE PTR ES:[BX], 121
                                JE                 STILLLEFT
                                CMP                BYTE PTR ES:[BX], 17
                                JE                 STILLLEFT
                                CMP                BYTE PTR ES:[BX], 28
                                JE                 STILLLEFT
                                JMP                GOUPBYTE

    STILLLEFT:                  
                                DEC                DI
                                JMP                GOLEFTBYTE
    GOUPBYTE:                   
                                MOV                BX, DI
                                SUB                BX, SCREEN_WIDTH
                                CMP                BYTE PTR ES:[BX], 36
                                JE                 STILLUP
                                CMP                BYTE PTR ES:[BX], 112
                                JE                 STILLUP
                                CMP                BYTE PTR ES:[BX], 121
                                JE                 STILLUP
                                CMP                BYTE PTR ES:[BX], 17
                                JE                 STILLUP
                                CMP                BYTE PTR ES:[BX], 28
                                JE                 STILLUP
                                JMP                FINISHGETTOPLEFT
        
    STILLUP:                    
                                SUB                DI, SCREEN_WIDTH
                                JMP                GOUPBYTE

    FINISHGETTOPLEFT:           
                                MOV                POWERTOPLEFTBYTE, DI
                                RET
GETTOPLEFTPOWER ENDP

    ;description
GetTopLeftObstacle PROC FAR
                                PUSH               DI

    GoLeft2:                    
                                MOV                BX , DI
                                DEC                BX
                                MOV                DL , BYTE PTR ES:[BX]
                                CMP                DL , 16
                                JE                 UpdateLeft
                                CMP                DL , 28
                                JE                 UpdateLeft
                                JMP                GoUp2
    UpdateLeft:                 
                                DEC                DI
                                JMP                GoLeft2
    GoUp2:                      
                                MOV                BX , DI
                                SUB                BX , SCREEN_WIDTH
                                MOV                DL , BYTE PTR ES:[BX]
                                CMP                DL , 16
                                JE                 UpdateUp
                                CMP                DL , 28
                                JE                 UpdateUp
                                JMP                VertixFound2

    UpdateUp:                   
                                SUB                DI , SCREEN_WIDTH
                                JMP                GoUp2

    VertixFound2:               
                                CALL               CALCXY
    ;MOV                BYTE PTR ES:[DI] , 04H
                                
                                MOV                DX , TEMPX
                                MOV                TopleftObstX , DX

                                MOV                DX , TEMPY
                                MOV                TopleftObstY , DX
                                
                                POP                DI
                                RET

GetTopLeftObstacle ENDP

STORINGROADUNDERPOWER PROC
                                MOV                AX, POWERH
                                MOV                OUTCOUNTER, AX

    POWERROWS:                  
                                MOV                FIRSTBYTEINROW, DI
                                MOV                AX, POWERW
                                MOV                INCOUNTER, AX
    POWERCOLS:                  
                                MOV                AL, BYTE PTR ES:[DI]
                                MOV                BYTE PTR DS:[SI], AL

                                INC                DI
                                INC                SI
                                DEC                INCOUNTER
                                JNZ                POWERCOLS
                                MOV                DI, FIRSTBYTEINROW
                                ADD                DI, SCREENWIDTH
                                DEC                OUTCOUNTER
                                JNZ                POWERROWS
                                RET
STORINGROADUNDERPOWER ENDP

RETRIEVEROAD PROC
                                MOV                AL, POWERW * POWERH
                                MOV                BX, CURPOWERINDEX
                                MOV                BH, 0
                                MUL                BL                                                                                                                                ; NOW AX HAS THE INDEX OF STARTING BYTE

                                MOV                SI, OFFSET ROADUNDERPOWER
                                ADD                SI, AX

                                MOV                BX, OFFSET TOPLEFTPOWER
                                MOV                AL, 2
                                MOV                DX, CURPOWERINDEX
                                MOV                DH, 0
                                MUL                DL
                                ADD                BX, AX
                                MOV                DI, WORD PTR DS:[BX]

                                MOV                CX, POWERH
    RETRIEVEROWS:               
                                PUSH               CX
                                PUSH               DI
                                MOV                CX, POWERW
    RETRIEVECOLS:               
                                MOV                DL, BYTE PTR DS:[SI]
                                MOV                BYTE PTR ES:[DI], DL
                                INC                SI
                                INC                DI
                                LOOP               RETRIEVECOLS
                                POP                DI
                                POP                CX
                                ADD                DI, SCREENWIDTH
                                LOOP               RETRIEVEROWS
                                RET
RETRIEVEROAD ENDP



SEARCHTORETRIEVE PROC
                                MOV                DX, POWERTOPLEFTBYTE
                                MOV                SI, OFFSET TOPLEFTPOWER
                                MOV                CX, POWERUPCOUNTER
    SEARCH:                     
                                CMP                WORD PTR DS:[SI], DX
                                JE                 GOTORETRIEVE
                                ADD                SI, 2
                                LOOP               SEARCH

    GOTORETRIEVE:               
                                MOV                AX, POWERUPCOUNTER
                                SUB                AX, CX
                                MOV                CURPOWERINDEX, AX
                                CALL               RETRIEVEROAD
                                RET
SEARCHTORETRIEVE ENDP

SHOWHIDDENPOWER PROC
                                MOV                AX, INDEXSTARTSHOWING
                                DEC                AX
                                MOV                BL, 2
                                MOV                BH, 0
                                MUL                BL                                                                                                                                ;NOW WE HAVE THE SHIFTING IN AX
                                MOV                SI, OFFSET TOPLEFTPOWER
                                ADD                SI, AX
                                MOV                DI, WORD PTR DS:[SI]
                                CALL               CALCXY
                                MOV                TMP4, 0

    ;DECIDING WHICH POWERUP TO DRAW
                                CALL               GETSYSTEMTIME
    ;AND DL, 3
                                MOV                AL, 4
                                MOV                RANGEOFRAND, AL
                                CALL               RANGINGRAND
                                CMP                DL, 0
                                JNE                HIDNODECSPEED

                                DRAW               DECSPEEDPOWER, POWERW, POWERH, TEMPX, TEMPY, TMP4
                                JMP                HIDFINISHPOWER
    HIDNODECSPEED:              

                                CMP                DL, 1
                                JNE                HIDNOINCSPEED
                                DRAW               INCSPEEDPOWER, POWERW, POWERH, TEMPX, TEMPY, TMP4
                                JMP                HIDFINISHPOWER
    HIDNOINCSPEED:              

                                CMP                DL, 2
                                JNE                HIDNOPASSOBST
                                DRAW               PASSOBSTPOWER, POWERW, POWERH, TEMPX, TEMPY, TMP4
                                JMP                HIDFINISHPOWER
    HIDNOPASSOBST:              

                                CMP                DL, 3
                                JNE                HIDFINISHPOWER
                                DRAW               CREATEOBSTPOWER, POWERW, POWERH, TEMPX, TEMPY, TMP4

    HIDFINISHPOWER:             
            
                                RET
SHOWHIDDENPOWER ENDP

WHICHPOWERIMG PROC
                                CHECKCANDRAWPOWER  POWERW, POWERH, TEMPX, TEMPY                                                                                                      ;IF IT WILL BE DRAWN ON THE OBST IT WILL NOT BE DRAWN AT ALL (SKIPPED)
    
                                CALL               RANDOMIZEPERCENTAGE
                                CMP                DL, POWERPROBABILITY
                                JA                 FINISHPOWER

                                MOV                DI, TEMPY
                                MOV                AX, SCREENWIDTH
                                MUL                DI
                                MOV                DI, AX
                                ADD                DI, TEMPX

    ;STORING THE TOP LEFT CORNER AND THE ROAD UNDER THE POWER UP
                                MOV                SI, OFFSET TOPLEFTPOWER
                                MOV                AL, 2
                                MOV                BX, POWERUPCOUNTER
                                MOV                BH, 0
                                MUL                BL
                                ADD                SI, AX
                                MOV                WORD PTR DS:[SI], DI

                                MOV                SI, OFFSET ROADUNDERPOWER
                                MOV                AL, POWERW * POWERH
                                MOV                BX, POWERUPCOUNTER
                                MOV                BH, 0
                                MUL                BL
                                ADD                SI, AX
                                CALL               STORINGROADUNDERPOWER
    
    ;RANDOMIZING WHETHER TO DRAW OR MAKE IT HIDDEN UNTIL WE SHOW IT DURING THE GAME
                                CALL               RANDOMIZEPERCENTAGE
                                MOV                SI, OFFSET ISVISIBLEPOWER
                                ADD                SI, POWERUPCOUNTER
                                INC                POWERUPCOUNTER                                                                                                                    ; WE MOVE THAT LINE HERE AS WE NEEDED IT IN THE PREVIOUS LINE
                                CMP                DL, POWERVISIBPROBABILITY
                                JBE                VISIBLE
                                MOV                BYTE PTR DS:[SI], 0
                                JMP                FINISHPOWER
    
    VISIBLE:                    
                                MOV                BYTE PTR DS:[SI], 1
                                CALL               GETSYSTEMTIME
    ;AND DL, 3
                                MOV                AL, 4
                                MOV                RANGEOFRAND, AL
                                CALL               RANGINGRAND
                                CMP                DL, 0
                                JNE                NODECSPEED

                                DRAW               DECSPEEDPOWER, POWERW, POWERH, TEMPX, TEMPY, TMP4
                                JMP                FINISHPOWER
    NODECSPEED:                 

                                CMP                DL, 1
                                JNE                NOINCSPEED
                                DRAW               INCSPEEDPOWER, POWERW, POWERH, TEMPX, TEMPY, TMP4
                                JMP                FINISHPOWER
    NOINCSPEED:                 

                                CMP                DL, 2
                                JNE                NOPASSOBST
                                DRAW               PASSOBSTPOWER, POWERW, POWERH, TEMPX, TEMPY, TMP4
                                JMP                FINISHPOWER
    NOPASSOBST:                 

                                CMP                DL, 3
                                JNE                FINISHPOWER
                                DRAW               CREATEOBSTPOWER, POWERW, POWERH, TEMPX, TEMPY, TMP4

    FINISHPOWER:                

                                RET
WHICHPOWERIMG ENDP



OBSTRANDANDDRAW PROC
                                CALL               RANDOMIZEPERCENTAGE
                                CMP                DL, OBSTPROBABILITY
                                JA                 FINISHOBST
                                DRAW               OBSTACLE, OBSTACLEW, OBSTACLEH, TEMPX, TEMPY, TMP4
    FINISHOBST:                 
                                RET
OBSTRANDANDDRAW ENDP

RANGINGRAND PROC
                                MOV                AL, DL
                                MOV                AH, 0
                                MOV                BL, RANGEOFRAND
                                DIV                BL
                                MOV                DL, AH
                                MOV                DH, 0
                                RET
RANGINGRAND ENDP


    ;PROC TO DRAW THE END RACE LINE
DRAWENDLINE PROC
    ;THIS CAN BE EDITED INTO THE PROC CALCXY(OPTIMIZATION)
                                MOV                AX, LASTDI
                                MOV                DX, 0
                                MOV                BX, SCREENWIDTH
                                DIV                BX
                                MOV                TEMPX, DX
                                MOV                TEMPY, AX
                                MOV                TMP4, 0

                                CMP                LASTDIR, 0
                                JNE                NOTLASTUP
                                SUB                TEMPX, VERROADIMGW
                                SUB                TEMPY, HORENDFLAGIMGH
                                DRAW               HORENDFLAGIMG, HORENDFLAGIMGW, HORENDFLAGIMGH, TEMPX, TEMPY, TMP4
                                JMP                FINISHDRAWENDLINE
    NOTLASTUP:                  

                                CMP                LASTDIR, 1
                                JNE                NOTLASTRIGHT
                                DRAW               VERENDFLAGIMG, VERENDFLAGIMGW, VERENDFLAGIMGH, TEMPX, TEMPY, TMP4
                                JMP                FINISHDRAWENDLINE
    NOTLASTRIGHT:               

                                CMP                LASTDIR, 2
                                JNE                NOTLASTDOWN
                                SUB                TEMPX, VERROADIMGW
                                ADD                TEMPY, VERROADIMGH
                                DRAW               HORENDFLAGIMG, HORENDFLAGIMGW, HORENDFLAGIMGH, TEMPX, TEMPY, TMP4
                                JMP                FINISHDRAWENDLINE
    NOTLASTDOWN:                
    
                                SUB                TEMPX, HORROADIMGW + VERENDFLAGIMGW
                                DRAW               VERENDFLAGIMG, VERENDFLAGIMGW, VERENDFLAGIMGH, TEMPX, TEMPY, TMP4
    
    FINISHDRAWENDLINE:          
                                RET
DRAWENDLINE ENDP

    ;prints character by character in video game mode in order to display string with font
char_display proc  FAR
                                mov                ah, 9
                                mov                bh, 0
                                mov                bl, 93H                                                                                                                           ;ANY COLOR.
                                mov                cx, 1                                                                                                                             ;HOW MANY TIMES TO DISPLAY CHAR.
                                int                10h
                                ret
char_display endp
STORECHECKLINEVERTIX PROC
                                MOV                SI, OFFSET CHECKLINESVERTICIES
                                MOV                AX, 2
                                MOV                DX, INDEXOFPART
                                MUL                DL
                                ADD                SI, AX
                                MOV                WORD PTR DS:[SI], BX
                                INC                INDEXOFPART
                                RET
STORECHECKLINEVERTIX ENDP

DRAWCHECKLINE PROC
                                PUSH               TEMPX
                                PUSH               TEMPY
                                MOV                TMP4, 0

                                CMP                LASTDIR, 0
                                JNE                NOTLASTUPCHECK
                                SUB                TEMPX, VERROADIMGW
                                DRAW               CHECKLINEIMG, HORCHECKLINEIMGW, HORCHECKLINEIMGH, TEMPX, TEMPY, TMP4
                                MOV                BX, DI
                                SUB                BX, HORCHECKLINEIMGW                                                                                                              ; CHECKED
                                CALL               STORECHECKLINEVERTIX
                                JMP                FINISHDRAWCHECKLINE
    NOTLASTUPCHECK:             

                                CMP                LASTDIR, 1
                                JNE                NOTLASTRIGHTCHECK
                                ADD                TEMPX, HORROADIMGW - 1
                                DRAW               CHECKLINEIMG, VERCHECKLINEIMGW, VERCHECKLINEIMGH, TEMPX, TEMPY, TMP4
                                MOV                BX, DI
                                DEC                BX
                                CALL               STORECHECKLINEVERTIX
                                JMP                FINISHDRAWCHECKLINE
    NOTLASTRIGHTCHECK:          

                                CMP                LASTDIR, 2
                                JNE                NOTLASTDOWNCHECK
                                SUB                TEMPX, VERROADIMGW
                                ADD                TEMPY, VERROADIMGH - 1
                                DRAW               CHECKLINEIMG, HORCHECKLINEIMGW, HORCHECKLINEIMGH, TEMPX, TEMPY, TMP4
                                MOV                BX, DI
                                SUB                BX, HORCHECKLINEIMGW                                                                                                              ;CHECKED
                                CALL               STORECHECKLINEVERTIX
                                JMP                FINISHDRAWCHECKLINE
    NOTLASTDOWNCHECK:           
    
                                SUB                TEMPX, HORROADIMGW
                                DRAW               CHECKLINEIMG, VERCHECKLINEIMGW, VERCHECKLINEIMGH, TEMPX, TEMPY, TMP4
                                MOV                BX, DI
                                DEC                BX
                                CALL               STORECHECKLINEVERTIX
    FINISHDRAWCHECKLINE:        
                                POP                TEMPY
                                POP                TEMPX
                                RET
DRAWCHECKLINE ENDP

PRINTTWODIGITNUMBER PROC FAR
                                MOV                BL,100
                                DIV                BL                                                                                                                                ;;al = ax / bl, ah = ax & bl
                                MOV                DL,AL
                                PUSH               AX                                                                                                                                ;To save remainder
                                ADD                DL,30h                                                                                                                            ; Add 30h to print ASCII
                                MOV                AH, 02h                                                                                                                           ; Print a character in dl
                                INT                21h

                                POP                AX
                                MOV                BL,10
                                MOV                AL, AH
                                MOV                AH,0
                                DIV                BL
                                MOV                DL, AL
                                PUSH               AX
                                ADD                DL,30h
                                MOV                AH,02h
                                INT                21h
                                POP                AX
                                MOV                DL,AH
                                ADD                DL,30h
                                MOV                AH, 02h
                                INT                21h
                                RET
PRINTTWODIGITNUMBER ENDP

PRINTTHREEDIGITNUMBER PROC FAR
                                MOV                BL,100
                                DIV                BL                                                                                                                                ;;al = ax / bl, ah = ax & bl
                                MOV                DL,AL
                                PUSH               AX                                                                                                                                ;To save remainder
                                ADD                DL,30h                                                                                                                            ; Add 30h to print ASCII
                                MOV                AH, 02h                                                                                                                           ; Print a character in dl
                                INT                21h
                                POP                AX
                                MOV                BL,10
                                MOV                AL, AH
                                MOV                AH,0
                                DIV                BL
                                MOV                DL, AL
                                PUSH               AX
                                ADD                DL,30h
                                MOV                AH,02h
                                INT                21h
                                POP                AX
                                MOV                DL,AH
                                ADD                DL,30h
                                MOV                AH, 02h
                                INT                21h
                                RET
PRINTTHREEDIGITNUMBER ENDP

UPDATESCORE PROC FAR
                                MOV                BX, CHECKLINEVERTEX
                                MOV                SI, OFFSET CHECKLINESVERTICIES
                                MOV                CX, INDEXOFPART
    SEARCHCHECKVERTIX:          
                                CMP                WORD PTR DS:[SI], BX
                                JE                 FOUNDCHECKVERTIX
                                ADD                SI, 2
                                LOOP               SEARCHCHECKVERTIX

    FOUNDCHECKVERTIX:           
                                MOV                DX, INDEXOFPART
                                SUB                DX, CX                                                                                                                            ;DX NOW HAS THE INDEX OF THE VERTIX
                                CMP                CX, 0
                                JBE                FINISHUPDATESCORE

                                CMP                CarToScan, 0
                                JNE                SECONDCARVIS
                                MOV                SI, OFFSET CAR1VIS
                                ADD                SI, DX
                                CMP                BYTE PTR DS:[SI], 1
                                JE                 UPDATETHESCORES
                                MOV                BYTE PTR DS:[SI], 1
                                INC                CAR1PARTSVIS
                                JMP                UPDATETHESCORES
    
    SECONDCARVIS:               
                                MOV                SI, OFFSET CAR2VIS
                                ADD                SI, DX
                                CMP                BYTE PTR DS:[SI], 1
                                JE                 UPDATETHESCORES
                                MOV                BYTE PTR DS:[SI], 1
                                INC                CAR2PARTSVIS

    UPDATETHESCORES:            
                                MOV                AX, CAR1PARTSVIS
                                MOV                BL, 100
                                MUL                BL
                                MOV                BX, INDEXOFPART
                                DIV                BL
                                MOV                AH, 0
                                PUSH               AX
                                MOV                AH,2
                                MOV                BH, 0
                                MOV                DH, player2PosY
                                MOV                DL, 77
                                INT                10H
                                POP                AX
                                MOV                CAR1SCORE, AX

                                CALL               PRINTTHREEDIGITNUMBER
   

                                MOV                AX, CAR2PARTSVIS
                                MOV                BL, 100
                                MUL                BL
                                MOV                BX, INDEXOFPART
                                DIV                BL
                                MOV                AH, 0
                                PUSH               AX
                                MOV                AH,2
                                MOV                BH, 0
                                MOV                DH, player1PosY
                                MOV                DL, 17
                                INT                10H
                                POP                AX

                                MOV                CAR2SCORE, AX                                                                                                                     ;WE FLIPPED THAT AS WE NEED THAT RIGHT NOW
                                CALL               PRINTTHREEDIGITNUMBER
   


    ; MOV DL, AL
    ; MOV AH, 2
    ; INT 21H

    FINISHUPDATESCORE:          
                                RET
UPDATESCORE ENDP

GETCHECKLINEVERTIX PROC FAR

                                MOV                BX, DI
                                ADD                BX, 7
    ; CMP BYTE PTR ES:[BX], 19
    ; JE ISHORIZONTAL
    ; SUB BX, 14
    ; CMP BYTE PTR ES:[BX], 19
    ; JE ISHORIZONTAL
                                CMP                ISVERTICALCHECKLINE, 0
                                JE                 ISHORIZONTAL
                                JMP                ISVERTICAL

    ISHORIZONTAL:               
                                MOV                BX, DI
    LEFTVERTIX:                 
                                DEC                BX
                                CMP                BYTE PTR ES:[BX], 20
                                JE                 LEFTVERTIX
                                CMP                BYTE PTR ES:[BX], 19
                                JE                 LEFTVERTIX
                                CMP                BYTE PTR ES:[BX], 17
                                JE                 LEFTVERTIX
                                CMP                BYTE PTR ES:[BX], 192
                                JE                 LEFTVERTIX
                                CMP                BYTE PTR ES:[BX], 122
                                JE                 LEFTVERTIX
                                CMP                BYTE PTR ES:[BX], 9
                                JE                 LEFTVERTIX
                                CMP                BYTE PTR ES:[DI], 43
                                JE                 LEFTVERTIX
                                INC                BX
                                JMP                FINISHUPDATING

    ISVERTICAL:                 
                                MOV                BX, DI
    UPVERTIX:                   
                                SUB                BX, SCREEN_WIDTH
                                CMP                BYTE PTR ES:[BX], 20
                                JE                 UPVERTIX
                                CMP                BYTE PTR ES:[BX], 19
                                JE                 UPVERTIX
                                CMP                BYTE PTR ES:[BX], 17
                                JE                 UPVERTIX
                                CMP                BYTE PTR ES:[BX], 192
                                JE                 UPVERTIX
                                CMP                BYTE PTR ES:[BX], 122
                                JE                 UPVERTIX
                                CMP                BYTE PTR ES:[BX], 9
                                JE                 UPVERTIX
                                CMP                BYTE PTR ES:[DI], 43
                                JE                 UPVERTIX
                                ADD                BX, SCREEN_WIDTH
    FINISHUPDATING:             

                                MOV                CHECKLINEVERTEX, BX
                                RET
GETCHECKLINEVERTIX ENDP


ShowCurrentTime PROC FAR
    ;Drawing the timer-area box
    ;                              MOV                CarToDrawX, SCREEN_WIDTH - 40
    ;                              MOV                CarToDrawY ,0
    ;                              CALL               CalculateBoxVertex
    ;                              MOV                CX , 10
                                
    ; DrawTimerAreaBackground_COLS:
    ;                              PUSH               CX
    ;                              PUSH               DI
    ;                              MOV                CX , 40

    ; DrawTimerAreaBackground_ROWS:
    ;                              MOV                BYTE PTR ES:[DI] , 18
    ;                              INC                DI
    ;                              LOOP               DrawTimerAreaBackground_ROWS

    ;                              POP                DI
    ;                              POP                CX
    ;                              ADD                DI , SCREEN_WIDTH
    ;                              LOOP               DrawTimerAreaBackground_COLS



    ;Drawing the timer-area text
    ;  MOV                AH , 2
    ;  MOV                DL , 75
    ;  MOV                DH , 0                                                                                  ;ANY COLOR.
    ;  MOV                BH,0
    ;  INT                10H

    ;  MOV                DX, OFFSET TimerMsg
    ;  MOV                AH, 9
    ;  INT                21H
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            
                                MOV                AH, 2CH                                                                                                                           ; INTERRUPT to get system time
                                INT                21H

                                CMP                DH , PreviousSecond
                                JNE                HEREWEGO
                                JMP                CheckTimeFinish

    HEREWEGO:                   
                                

                                MOV                PreviousSecond , DH
                                INC                TotalSeconds
                                MOV                AH , 0
                                MOV                AL , TotalSeconds
                                MOV                BL , 60
                                DIV                BL
                                   
                                
                                MOV                CountSecond , AH                                                                                                                  ; Current Seconds
                                MOV                CountMinute , AL                                                                                                                  ; Current Minutes

                                CMP                TotalSeconds , 240                                                                                                                ; 2 minutes are achieved
                                JNE                CheckTimeFinish

                                MOV                TimerFinished , 1
                                JMP                GameTimerFinished
    CheckTimeFinish:            
                                MOV                AH , 2
                                MOV                DL , 75
                                MOV                DH , 0                                                                                                                            ;ANY COLOR.
                                MOV                BH,0
                                INT                10H
                                
                                MOV                AH , 2
                                MOV                BH,0
                                MOV                BL ,0H
                                MOV                DL , CountMinute
                                ADD                DL ,30H
                                MOV                CX , 1
                                INT                21H

                                MOV                AH , 2
                                MOV                DL , 76
                                MOV                DH ,0                                                                                                                             ;ANY COLOR.
                                MOV                BH,0
                                INT                10H
                                
                                MOV                AH , 2
                                MOV                BH,0
                                MOV                BL ,0H
                                MOV                DL , ':'
                                MOV                CX , 1
                                INT                21H

                                MOV                AH , 2
                                MOV                DL , 77
                                MOV                DH,0                                                                                                                              ;ANYCOLOR.
                                MOV                BH,0
                                INT                10H

                                MOV                AX , 0
                                ADD                AL , CountSecond
                                CALL               PRINTTHREEDIGITNUMBER

    GameTimerFinished:          

                                RET
ShowCurrentTime ENDP

    ;description
ENDGAME PROC

                                CALL               INTERFACEBACKGROUND

                                CMP                EXITSTATUS, 2
                                JNE                SHOWSCORES

                                CMP                WINNER, 1
                                JNE                SECONDWON

                                MOV                AH, 2H
                                MOV                DL, 16
                                MOV                DH, 12
                                MOV                BH, 0
                                INT                10H

                                MOV                AH, 9
                                MOV                DX, OFFSET SECONDNAME                                                                                                             ;WE FLIPPED THAT DUE TO PROJECT SCHEDULE
                                INT                21H

                                MOV                AH, 9
                                MOV                DX, OFFSET WONMESSAGE
                                INT                21H
                                JMP                FINISHENDGAME
    SECONDWON:                  

                                MOV                AH, 2H
                                MOV                DL, 16
                                MOV                DH, 12
                                MOV                BH, 0
                                INT                10H

                                MOV                AH, 9
                                MOV                DX, OFFSET FIRSTNAME
                                INT                21H

                                MOV                AH, 9
                                MOV                DX, OFFSET WONMESSAGE
                                INT                21H

                                JMP                FINISHENDGAME

    SHOWSCORES:                 
                                MOV                AH, 2H
                                MOV                DL, 16
                                MOV                DH, 12
                                MOV                BH, 0
                                INT                10H

                                MOV                AH, 9
                                MOV                DX, OFFSET FIRSTNAME
                                INT                21H

                                MOV                AH, 2
                                MOV                DL, ':'
                                INT                21H

                                MOV                AH, 2
                                MOV                DL, ' '
                                INT                21H
    
                                MOV                AX, CAR2SCORE                                                                                                                     ;WE FLIPPED THEM DUE TO LATE SUMBISSION
                                CALL               PRINTTHREEDIGITNUMBER

    ; SECOND PLAYER SCORE
                                MOV                AH, 2H
                                MOV                DL, 16
                                MOV                DH, 14
                                MOV                BH, 0
                                INT                10H

                                MOV                AH, 9
                                MOV                DX, OFFSET SECONDNAME
                                INT                21H

                                MOV                AH, 2
                                MOV                DL, ':'
                                INT                21H

                                MOV                AH, 2
                                MOV                DL, ' '
                                INT                21H

                                MOV                AX, CAR1SCORE
                                CALL               PRINTTHREEDIGITNUMBER

    FINISHENDGAME:              
                                RET
ENDGAME ENDP


    ;description
STATUSBARANDROAD PROC
    
    
    ;Drawing Status Bar
                                CalcStatBarStPts
                                CALL               DrawStatBar
    ;THIS IS TO RANDOMIZE NUMBER FROM 0 TO 3 TO SPECIFY THE DIRECTON
                                MOV                CX, NUMBEROFPARTS
    RANDOMIZEPART:              
                                CHECKPOSSIBILITIES
    START:                      
                                                
                                PUSH               CX
                                CALL               GETSYSTEMTIME
                                POP                CX
    ; FOR RECIEVER
                                CMP                PLAYERNUMBER, 2
                                JNE                DIRRECIEVED
                                CALL               RECIEVE
                                CMP                RECIEVEDVALUE, 4
                                JE                 STARTPROGRAM
                                CMP                RECIEVEDVALUE, 5
                                JE                 NOTSTARTPROGRAM
                                MOV                DL, RECIEVEDVALUE
    DIRRECIEVED:                
                                AND                DL, 3
                                CMP                DL, 0                                                                                                                             ;UP
                                JE                 CHECKUP
                                CMP                DL, 1                                                                                                                             ;RIGHT
                                JE                 CHECKRIGHT
                                CMP                DL, 2                                                                                                                             ;DOWN
                                JE                 CHECKDOWN
                                JMP                CHECKLEFT                                                                                                                         ;left

    CHECKUP:                    
                                CMP                UPDIR, 0
                                JNE                CONTUP
                                MOV                CANTUP, 1
                                JMP                RANDOMIZEPART
    CONTUP:                     

                                MOV                AX, UPDIR
                                MOV                DX, 0
                                MOV                BX, SCREENWIDTH
                                DIV                BX
                                MOV                TEMPX, DX
                                MOV                TEMPY, AX
                                CMP                TEMPY, YNOUP
                                JB                 NOTHANDLEUP
                                JMP                HANDLEUP
    NOTHANDLEUP:                
                                MOV                CANTUP, 1
                                JMP                RANDOMIZEPART


    CHECKRIGHT:                 
                                CMP                RIGHTDIR, 0
                                JNE                CONTRIGHT
                                MOV                CANTRIGHT, 1
                                JMP                RANDOMIZEPART
    CONTRIGHT:                  

                                MOV                AX, RIGHTDIR
                                MOV                DX, 0
                                MOV                BX, SCREENWIDTH
                                DIV                BX
                                MOV                TEMPX, DX
                                MOV                TEMPY, AX
                                CMP                TEMPX, XNORIGHT
                                JA                 NOTHANDLERIGHT
                                JMP                HANDLERIGHT
    NOTHANDLERIGHT:             
                                MOV                CANTRIGHT, 1
                                JMP                RANDOMIZEPART
    
    CHECKDOWN:                  
                                CMP                DOWNDIR, 0
                                JNE                CONTDOWN
                                MOV                CANTDOWN, 1
                                JMP                RANDOMIZEPART
    CONTDOWN:                   

                                MOV                AX, DOWNDIR
                                MOV                DX, 0
                                MOV                BX, SCREENWIDTH
                                DIV                BX
                                MOV                TEMPX, DX
                                MOV                TEMPY, AX
                                CMP                TEMPY, YNODOWN
                                JA                 NOTHANDLEDOWN
                                JMP                HANDLEDOWN
    NOTHANDLEDOWN:              
                                MOV                CANTDOWN, 1
                                JMP                RANDOMIZEPART
    
    CHECKLEFT:                  
                                CMP                LEFTDIR, 0
                                JNE                CONTLEFT
                                MOV                CANTLEFT, 1
                                JMP                RANDOMIZEPART
    CONTLEFT:                   

                                MOV                AX, LEFTDIR
                                MOV                DX, 0
                                MOV                BX, SCREENWIDTH
                                DIV                BX
                                MOV                TEMPX, DX
                                MOV                TEMPY, AX
                                CMP                TEMPX, XNOLEFT
                                JB                 NOTHANDLELEFT
                                JMP                HANDLELEFT
    NOTHANDLELEFT:              
                                MOV                CANTLEFT, 1
                                JMP                RANDOMIZEPART





    ;THIS PART OF HANDLES WAS REVISED
    ;WE CHECK AGAIN HERE FOR THE SCREEN EDGES
    HANDLEUP:                   
                                MOV                TMP, 0
    ;THIS IS TO LEAVE SOME SPACE FOR A ORTHOGONAL PART TO BE DRAWN
                                MOV                TMP1, VERROADIMGH + HORROADIMGH + 2
                                SUB                TEMPY, HORROADIMGH + 2
                                CHECKCANDRAW       VERROADIMGW, TMP1, TEMPX, TEMPY, TMP
                                ADD                TEMPY, HORROADIMGH + 2
                                MOV                TMP4, 1
                                DRAW               VERROADIMG, VERROADIMGW, VERROADIMGH, TEMPX, TEMPY, TMP4
                                CALL               POINTSAFTERUP
                                MOV                LASTDIR, 0
                                CALL               DRAWCHECKLINE

    ;OBSTACLE RANDOMIZATION
                                PUSH               CX
                                PUSH               TEMPX
                                PUSH               TEMPY
                                CALL               GETSYSTEMTIME
                                AND                DL, VERROADIMGW - OBSTACLEW
                                MOV                DH, 0
                                SUB                TEMPX, OBSTACLEW
                                SUB                TEMPX, DX
                                CALL               GETSYSTEMTIME
                                AND                DL, VERROADIMGH - OBSTACLEH - THRESHOLD                                                                                           ; THIS THRESHOLD TO START FROM 10 TO 40 TO NOT MAKE TWO OBSTACLES IN THE CORNER TOGETHER
                                MOV                DH, 0
                                ADD                TEMPY, THRESHOLD / 2                                                                                                              ;AS THRESHOLD IS 20 TO START FROM 10
                                ADD                TEMPY, DX
                                MOV                TMP4, 0
                                CALL               OBSTRANDANDDRAW
    
    ;POWERUPRANDOMIZATION
                                POP                TEMPY
                                POP                TEMPX
                                CALL               GETSYSTEMTIME
                                MOV                AL, VERROADIMGW - POWERW
                                MOV                RANGEOFRAND, AL
                                CALL               RANGINGRAND
                                SUB                TEMPX, POWERW
                                SUB                TEMPX, DX
                                CALL               GETSYSTEMTIME
                                MOV                AL, VERROADIMGH - POWERH - THRESHOLD
                                MOV                RANGEOFRAND, AL
                                CALL               RANGINGRAND
                                ADD                TEMPY, THRESHOLD / 2                                                                                                              ;AS THRESHOLD IS 20 TO START FROM 10
                                ADD                TEMPY, DX
                                MOV                TMP4, 0

    ;WHICH POWERUP
                                CALL               WHICHPOWERIMG
    
                                POP                CX
                                JMP                FINISH



    


    ;THIS THE ONLY DIRECTION WE DONT CALL XY IN IT SO THE DI IS STILL ON TOP LEFT AFTER FINISH DRAWING
    HANDLERIGHT:                
                                MOV                TMP, 1
                                MOV                TMP1, HORROADIMGW + VERROADIMGW + 2
                                CHECKCANDRAW       TMP1, HORROADIMGH, TEMPX, TEMPY, TMP
                                MOV                TMP4, 1
                                DRAW               HORROADIMG, HORROADIMGW, HORROADIMGH, TEMPX, TEMPY, TMP4
                                CALL               POINTSAFTERRIGHT
                                MOV                LASTDIR, 1
                                CALL               DRAWCHECKLINE

                                CMP                CX, 0                                                                                                                             ;HANDLING FIRST SEGMENT NO OBSTACLES
                                JNE                NOTFIRSTSEGMENT
                                JMP                FIRSTSEGMENT
    NOTFIRSTSEGMENT:            

    ;OBSTACLE RANDOMIZATION
                                PUSH               CX
                                PUSH               TEMPX
                                PUSH               TEMPY
                                CALL               GETSYSTEMTIME
                                AND                DL, HORROADIMGW - OBSTACLEW - THRESHOLD
                                MOV                DH, 0
                                ADD                TEMPX, THRESHOLD / 2
                                ADD                TEMPX, DX
                                CALL               GETSYSTEMTIME
                                AND                DL, HORROADIMGH - OBSTACLEH
                                MOV                DH, 0
                                ADD                TEMPY, DX
                                MOV                TMP4, 0
                                CALL               OBSTRANDANDDRAW


    ;POWERUPRANDOMIZATION
                                POP                TEMPY
                                POP                TEMPX
                                CALL               GETSYSTEMTIME
                                MOV                AL, HORROADIMGW - POWERW - THRESHOLD
                                MOV                RANGEOFRAND, AL
                                CALL               RANGINGRAND
                                ADD                TEMPX, THRESHOLD / 2
                                ADD                TEMPX, DX
                                CALL               GETSYSTEMTIME
                                MOV                AL, HORROADIMGH - POWERH
                                MOV                RANGEOFRAND, AL
                                CALL               RANGINGRAND
                                ADD                TEMPY, DX
                                MOV                TMP4, 0

    ;WHICH POWERUP
                                CALL               WHICHPOWERIMG


                                POP                CX

    FIRSTSEGMENT:               
                                JMP                FINISH
    





    HANDLEDOWN:                 
                                MOV                TMP, 2
                                MOV                TMP1, VERROADIMGH + HORROADIMGH + 2
                                CHECKCANDRAW       VERROADIMGW, TMP1, TEMPX, TEMPY, TMP
                                MOV                TMP4, 1
                                DRAW               VERROADIMG, VERROADIMGW, VERROADIMGH, TEMPX, TEMPY, TMP4
                                MOV                LASTDIR, 2
                                CALL               POINTSAFTERDOWN
                                CALL               DRAWCHECKLINE

    ;OBSTACLE RANDOMIZATION
                                PUSH               CX
                                PUSH               TEMPX
                                PUSH               TEMPY
                                CALL               GETSYSTEMTIME
                                AND                DL, VERROADIMGW - OBSTACLEW
                                MOV                DH, 0
                                SUB                TEMPX, OBSTACLEW
                                SUB                TEMPX, DX
                                CALL               GETSYSTEMTIME
                                AND                DL, VERROADIMGH - OBSTACLEH - THRESHOLD
                                MOV                DH, 0
                                ADD                TEMPY, THRESHOLD / 2
                                ADD                TEMPY, DX
                                MOV                TMP4, 0
                                CALL               OBSTRANDANDDRAW

    ;POWERUPRANDOMIZATION
                                POP                TEMPY
                                POP                TEMPX
                                CALL               GETSYSTEMTIME
                                MOV                AL, VERROADIMGW - POWERW
                                MOV                RANGEOFRAND, AL
                                CALL               RANGINGRAND
                                SUB                TEMPX, POWERW
                                SUB                TEMPX, DX
                                CALL               GETSYSTEMTIME
                                MOV                AL, VERROADIMGH - POWERH - THRESHOLD
                                MOV                RANGEOFRAND, AL
                                CALL               RANGINGRAND
                                ADD                TEMPY, THRESHOLD / 2
                                ADD                TEMPY, DX
                                MOV                TMP4, 0

    ;WHICH POWERUP
                                CALL               WHICHPOWERIMG


                                POP                CX
                                JMP                FINISH



    
    HANDLELEFT:                 
                                MOV                TMP, 3
                                MOV                TMP1, HORROADIMGW + VERROADIMGW + 2
                                SUB                TEMPX, VERROADIMGW + 2
                                CHECKCANDRAW       TMP1, HORROADIMGH, TEMPX, TEMPY, TMP
                                ADD                TEMPX, VERROADIMGW + 2
                                MOV                TMP4, 1
                                DRAW               HORROADIMG, HORROADIMGW, HORROADIMGH, TEMPX, TEMPY, TMP4
                                MOV                LASTDIR, 3
                                CALL               POINTSAFTERLEFT
                                CALL               DRAWCHECKLINE

    ;OBSTACLE RANDOMIZATION
                                PUSH               CX
                                PUSH               TEMPX
                                PUSH               TEMPY
                                CALL               GETSYSTEMTIME
                                AND                DL, HORROADIMGW - OBSTACLEW - THRESHOLD
                                MOV                DH, 0
                                SUB                TEMPX, OBSTACLEW  + THRESHOLD / 2
                                SUB                TEMPX, DX
                                CALL               GETSYSTEMTIME
                                AND                DL, HORROADIMGH - OBSTACLEH
                                MOV                DH, 0
                                ADD                TEMPY, DX
                                MOV                TMP4, 0
                                CALL               OBSTRANDANDDRAW


    ;POWERUPRANDOMIZATION
                                POP                TEMPY
                                POP                TEMPX
                                CALL               GETSYSTEMTIME
                                MOV                AL, HORROADIMGW - POWERW - THRESHOLD
                                MOV                RANGEOFRAND, AL
                                CALL               RANGINGRAND
                                SUB                TEMPX, POWERW  + THRESHOLD / 2
                                SUB                TEMPX, DX
                                CALL               GETSYSTEMTIME
                                MOV                AL, HORROADIMGH - POWERH
                                MOV                RANGEOFRAND, AL
                                CALL               RANGINGRAND
                                ADD                TEMPY, DX
                                MOV                TMP4, 0

    ;WHICH POWERUP
                                CALL               WHICHPOWERIMG


                                POP                CX

    FINISH:                     
    ;INITIALIZING CANT DRAW ARRAY
                                MOV                CANTUP, 0
                                MOV                CANTRIGHT, 0
                                MOV                CANTDOWN, 0
                                MOV                CANTLEFT, 0


    ;;SEEING IF I WAS THE SENDER
                                CMP                PLAYERNUMBER, 1                                                                                                                   ; 1 FOR SENDER
                                JNE                NOTSENDER
                                MOV                AX, LASTDIR
                                MOV                SENTVALUE, AL
                                CALL               SEND                                                                                                                              ; SEND DIRECTION TO PLAYER 2
   
                                DEC                CX
                                JNZ                GOUP
                                JMP                LAST
    NOTSENDER:                  
    GOUP:                       
                                JMP                FAR PTR RANDOMIZEPART


    ;ONLY SENDER
    LAST:                       
                                CMP                CX, NUMBEROFPARTS - MINNUMOFPARTS
                                JBE                NOTSTARTPROGRAM
                                CALL               GETSYSTEMTIME2
                                MOV                SENTVALUE, 4
                                CALL               SEND
                                JMP                STARTROAD
    NOTSTARTPROGRAM:            
                                CMP                PLAYERNUMBER, 1
                                JNE                ENDLINE
                                MOV                SENTVALUE, 5
                                CALL               SEND
    ENDLINE:                    
                                CALL               DRAWENDLINE


                                RET
STATUSBARANDROAD ENDP


    ;PORT INITIALIZATIONS
PORTINITIALIZE PROC
    ;Set Divisor Latch Access Bit
                                mov                dx,3fbh                                                                                                                           ; Line Control Register
                                mov                al,10000000b                                                                                                                      ;Set Divisor Latch Access Bit
                                out                dx,al                                                                                                                             ;Out it
    ;Set LSB byte of the Baud Rate Divisor Latch register.
                                mov                dx,3f8h
                                mov                al,0ch
                                out                dx,al
    ;Set MSB byte of the Baud Rate Divisor Latch register.
                                mov                dx,3f9h
                                mov                al,00h
                                out                dx,al
    ;Set port configuration
                                mov                dx,3fbh
                                mov                al,00011011b
    ; 0:Access to Receiver buffer, Transmitter buffer
    ; 0:Set Break disabled
    ; 011:Even Parity
    ; 0:One Stop Bit
    ; 11:8bits
                                out                dx,al
                                RET
PORTINITIALIZE ENDP



SEND PROC FAR
    ;Check that Transmitter Holding Register is Empty
                                mov                dx , 3FDH                                                                                                                         ; Line Status Register
    SENDAGAIN:                  
                                In                 al , dx                                                                                                                           ;Read Line Status
                                AND                al , 00100000b
                                JZ                 SENDAGAIN


    ;If empty put the VALUE in Transmit data register
                                mov                dx , 3F8H                                                                                                                         ; Transmit data register
                                mov                al,SENTVALUE
                                out                dx , al
                                RET
SEND ENDP

RECIEVE PROC FAR
    ;Check that Data Ready
                                mov                dx , 3FDH                                                                                                                         ; Line Status Register
    DATAREADYCHK:               in                 al , dx
                                AND                al , 1
                                JZ                 DATAREADYCHK

    ;If Ready read the VALUE in Receive data register
                                mov                dx , 03F8H
                                in                 al , dx
                                mov                RECIEVEDVALUE, al
                                RET
RECIEVE ENDP


SENDSTRING PROC
                                MOV                SI, SENTSTRINGOFFSET
    SENDANOTHERCHAR:            
                                MOV                AL, BYTE PTR [SI]
                                MOV                SENTVALUE, AL
                                CALL               SEND
                                CMP                SENTVALUE, '$'
                                JE                 FINISHSENDSTRING
                                INC                SI
                                JMP                SENDANOTHERCHAR

    FINISHSENDSTRING:           
                                RET
SENDSTRING ENDP

RECIEVESTRING PROC
                                MOV                SI, RECIEVEDSTRINGOFFSET
    RECIEVEANOTHERCHAR:         
                                CALL               RECIEVE
                                MOV                AL, RECIEVEDVALUE
                                MOV                BYTE PTR [SI], AL
                                CMP                SENTVALUE, '$'
                                JE                 FINISHRECIEVESTRING
                                INC                SI
                                JMP                RECIEVEANOTHERCHAR

    FINISHRECIEVESTRING:        
                                RET
RECIEVESTRING ENDP

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;; MAIN ;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MAIN PROC FAR
                                MOV                AX, @DATA
                                MOV                DS, AX


                                MOV                AH,0
                                MOV                AL,13H
                                INT                10H

                                MOV                AX, 0A000H
                                MOV                ES, AX

    ;PORT INITIALIZATOINS
                                CALL               PORTINITIALIZE

    ;;TAKING NAMES STAGE
    ; CALL               INTERFACESTAGE
    ;--------------    Overriding INT 9H   ---------------
    ;Disable interrrupts
                                CLI
                       
    ;Saving DS it will be the base of the addressing mode inside the interrupt
                                PUSH               DS
                                MOV                AX , CS
                                MOV                DS , AX

    ;changing interrup vector
                                MOV                AX , 2509H
                                LEA                DX , INT09H
                                INT                21H
                
    ;re-enabling interrupts
                                POP                DS
                                STI
    STARTTHEWHOLEPROGRAM:       
    ;INITIALIZATIONS
                                MOV                CANTUP, 0
                                MOV                CANTRIGHT, 0
                                MOV                CANTDOWN, 0
                                MOV                CANTLEFT, 0
                                MOV                POWERUPCOUNTER, 0                                                                                                                 ;ADDED THAT WHEN ADDED START PROGRAM
                                MOV                CURPOWERINDEX, 0
                                MOV                LetterF4Flag, 0
                                MOV                LetterF2Flag, 0
                                MOV                LetterEscFlag, 0
                                MOV                CAR1SCORE, 0
                                MOV                CAR2SCORE, 0
                                MOV                Car1Speed , 2
                                MOV                Car2Speed , 2


                                MOV                Car1SpeedUpCounter,  0
                                MOV                Car2SpeedUpCounter ,  0
                                MOV                CanUpdateX ,  0
                                MOV                CanUpdateY ,  0
                                MOV                POWERUPCOUNTER,  0
                                MOV                CURPOWERINDEX , 0
                                MOV                INDEXSTARTSHOWING, 0
                                MOV                CURSECOND,  61
                                MOV                INDEXOFPART,  0
                                MOV                CAR1PARTSVIS,  0
                                MOV                CAR2PARTSVIS ,  0

                                MOV                Touching1 ,  0
                                MOV                Touching2  ,  0
                                MOV                InObstacle1 , 0
                                MOV                InObstacle2 ,  0
    ;(XY)
                                MOV                ObstacleCollisionCount , 0

                                MOV                PreviousMinute,  0
                                MOV                PreviousSecond,  0
                                MOV                CountMinute,  0
                                MOV                CountSecond,  0
                                MOV                TotalSeconds,  0
                                MOV                TimerFinished ,  0



                                MOV                CX, NUMBEROFPARTS
                                MOV                SI, OFFSET CAR1VIS
    INITIALIZE1:                
                                MOV                BYTE PTR DS:[SI], 0
                                INC                SI
                                LOOP               INITIALIZE1

                                MOV                CX, NUMBEROFPARTS
                                MOV                SI, OFFSET CAR2VIS
    INITIALIZE2:                
                                MOV                BYTE PTR DS:[SI], 0
                                INC                SI
                                LOOP               INITIALIZE2


    ; CALL               MAINMENU
                                CMP                PLAYERNUMBER, 1
                                JE                 TAKINGNEXTSTAGE
    RECIEVESTARTINGSIGNAL:      
                                CALL               RECIEVE
                                CMP                RECIEVEDVALUE, 1
                                JNE                RECIEVESTARTINGSIGNAL
                                JMP                STARTPROGRAM

    ;TAKE THE NEXT STAGE FROM THE USER WHETHER TO PLAY OR EXIT
    TAKINGNEXTSTAGE:            
                                CMP                LetterF2Flag, 1
                                JE                 STARTPROGRAM
                                CMP                LetterEscFlag, 1
                                JE                 HLTPROGRAM

                                JMP                TAKINGNEXTSTAGE


    STARTPROGRAM:               
                                CMP                PLAYERNUMBER, 1
                                JNE                STARTPROGRAMNOTSENDER
                                
                                MOV                SENTVALUE, 1
                                CALL               SEND

    STARTPROGRAMNOTSENDER:      

    ;Multiplayers' Names
    ; MOV                LetterF4Flag, 0
    ; MOV                AH,2
    ; MOV                DH , player1PosY
    ; MOV                DL , player1PosX
    ; INT                10H

    ; MOV                AH ,9
    ; LEA                DX , player1Name
    ; INT                21H

    ; MOV                AH ,2
    ; MOV                DH , player2PosY
    ; MOV                DL , player2PosX
    ; INT                10H

    ; MOV                AH ,9
    ; LEA                DX , player2Name
    ; INT                21H

    ; MOV                AH ,2
    ; MOV                DH , player1PosY
    ; ADD                DH ,1
    ; MOV                DL , player1PosX
    ; INT                10H

    ; MOV                AH , 09
    ; LEA                DX , powerupMessage
    ; INT                21H

    ; MOV                AH ,2
    ; MOV                DH , player2PosY
    ; ADD                dh , 1
    ; MOV                DL , player2PosX
    ; INT                10H

    ; MOV                AH , 09
    ; LEA                DX , powerupMessage
    ; INT                21H

    ;;;;;;;;;; DRAWING ROAD ;;;;;;;;;;;;


    ;DRAWING PART OF ROAD
    ;DRAW BACKGROUNDIMAGE, SCREENWIDTH, SCREENHEIGHT, 0, 0


    STARTROAD:                  
                                MOV                CANTUP, 0
                                MOV                CANTRIGHT, 0
                                MOV                CANTDOWN, 0
                                MOV                CANTLEFT, 0
                                MOV                POWERUPCOUNTER, 0                                                                                                                 ;ADDED THAT WHEN ADDED START PROGRAM
                                MOV                CURPOWERINDEX, 0
                                MOV                CX, 11
                                MOV                TEMPX, 0
                                MOV                TEMPY, 0
    OUTERLOOP:                  
                                PUSH               CX
                                MOV                CX, 20
    INNERLOOP:                  
                                MOV                TMP4, 0
                                DRAW               BACKGROUNDIMAGEPART , BACKGROUNDIMAGEPARTW, BACKGROUNDIMAGEPARTH, TEMPX, TEMPY, TMP4
                                ADD                TEMPX, BACKGROUNDIMAGEPARTW
                                LOOP               INNERLOOP
                                MOV                TEMPX, 0
                                ADD                TEMPY, BACKGROUNDIMAGEPARTH
                                POP                CX
                                LOOP               OUTERLOOP
    ;CALL DRAWBCKGROUND

                                MOV                TMP4, 0
                                MOV                CX, 0
                                DRAW               HORROADIMG , HORROADIMGW, HORROADIMGH, STARTROADX, STARTROADY, TMP4
                                CALL               POINTSAFTERRIGHT
                                DRAW               STARTFLAGIMG, STARTFLAGIMGW, STARTFLAGIMGH, STARTROADX, STARTROADY, TMP4


                                CALL               STATUSBARANDROAD
    ; MOV CURPOWERINDEX, 4
    ; CALL RETRIEVEROAD

    ; set initial pos of first car in the game
                                MOV                PosXfirst , STARTROADX
                                MOV                PosYfirst , STARTROADY + 1
                                Draw_Car           CarImg1, CAR_SIZE, PosXfirst , PosYfirst, 1

    ; set initial pos of second car in the game
                                MOV                PosXsecond , STARTROADX
                                MOV                PosYsecond , STARTROADY + HORROADIMGH - Car_Size - 1
                                Draw_Car           CarImg2, CAR_SIZE, PosXsecond , PosYsecond, 2

                                MOV                DX , PosXfirst
                                MOV                PosX, DX

                                MOV                DX , PosYfirst
                                MOV                PosY, DX



        

    ; MOV TMP4 , 0
    ; MOV TEMPX , 71
    ; MOV TEMPY , 187
    ; DRAW INCSPEEDPOWER, POWERW, POWERH, TEMPX, TEMPY, TMP4

    ; MOV powerupParent , 1
    ; ClearPower

    mainLoop:                   
                                CALL               ShowCurrentTime
                                CMP                TimerFinished , 1
                                JNE                mainLoopBegins
                                MOV                EXITSTATUS, 2

                                MOV                AX, CAR2SCORE
                                CMP                CAR1SCORE , AX
                                JB                 SECONDPLAYERWON
                                MOV                WINNER, 1
                                JMP                FINISHDECIDING
    SECONDPLAYERWON:            
                                MOV                WINNER, 2
    FINISHDECIDING:             
                                CALL               ENDGAME
                                JMP                exit
    mainLoopBegins:             

                                MOV                AH, 2CH                                                                                                                           ; INTERRUPT to get system time
                                INT                21H

                                CALL               CheckSpeedUpTimer

                                MOV                AX, POWERUPCOUNTER
                                CMP                INDEXSTARTSHOWING, AX
                                JAE                DONTSHOWPOWER

                                MOV                AH, 2CH                                                                                                                           ; INTERRUPT to get system time
                                INT                21H

                                CMP                DH, CURSECOND
                                JE                 DONTSHOWPOWER
                                MOV                CURSECOND, DH

                                MOV                AL, DH
                                MOV                AH, 0
                                MOV                BL, DURATIONTOSHOWPOWER
                                DIV                BL
                                CMP                AH, 0
                                JNE                DONTSHOWPOWER
                                MOV                SI, OFFSET ISVISIBLEPOWER
                                ADD                SI, INDEXSTARTSHOWING
                                INC                INDEXSTARTSHOWING
                                CMP                BYTE PTR DS:[SI], 0
                                JNE                DONTSHOWPOWER
                                CALL               SHOWHIDDENPOWER


    DONTSHOWPOWER:              

                                MOV                DX , PosXfirst
                                MOV                PrevPosXfirst, DX

                                MOV                DX, PosYfirst
                                MOV                PrevPosYfirst, DX

                                MOV                DX , PosXsecond
                                MOV                PrevPosXsecond, DX

                                MOV                DX , PosYsecond
                                MOV                PrevPosYsecond ,DX


                                CMP                LetterF4Flag, 1
                                JNE                CONTINUEMAINLOOP
                                MOV                EXITSTATUS, 1
                                CALL               ENDGAME
                                JMP                exit
    CONTINUEMAINLOOP:           
    ;Checking on the recieving of characters
                                CMP                PLAYERNUMBER , 1
                                JNE                Player2Updating
                                CALL               RecieveWASDKeys
                                JMP                CheckFlagsAfterChange
    Player2Updating:            
                                CALL               RecieveArrowKeys

    CheckFlagsAfterChange:      
                                CALL               CheckArrowFlags
                                CALL               checkingPositionChange1

                                CALL               CheckWASDFlags
                                CALL               checkingPositionChange2

    ;Delay
                                MOV                CX , 0
                                MOV                DX , 40000D
                                MOV                AH , 86H
                                INT                15H
                                CMP                CAR1SCORE, 100
                                JNE                CHECKSECONDPLAYER
                                MOV                EXITSTATUS, 2
                                MOV                WINNER, 1
                                CALL               ENDGAME
                                JMP                exit

    CHECKSECONDPLAYER:          
                                CMP                CAR2SCORE, 100
                                JNE                GOTOMAINLOOP
                                MOV                EXITSTATUS, 2
                                MOV                WINNER, 2
                                CALL               ENDGAME
                                JMP                exit

    GOTOMAINLOOP:               

                                JMP                mainLoop                                                                                                                          ; keep looping
    exit:                       
                                MOV                CX, 4CH
                                MOV                DX, 4B40H                                                                                                                         ;63997
                                MOV                AH, 86H
                                INT                15H
                                JMP                FAR PTR STARTTHEWHOLEPROGRAM


    HLTPROGRAM:                 
                                MOV                AH, 4CH
                                INT                21H
                                HLT
MAIN ENDP


END MAIN
